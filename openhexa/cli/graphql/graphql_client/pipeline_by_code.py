# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    BucketObjectType,
    ConnectionType,
    CreateTemplateVersionPermissionReason,
    ParameterType,
    ParameterWidget,
    PipelineNotificationLevel,
    PipelineRunStatus,
    PipelineRunTrigger,
    PipelineType,
)


class PipelineByCode(BaseModel):
    pipeline_by_code: Optional["PipelineByCodePipelineByCode"] = Field(
        alias="pipelineByCode"
    )


class PipelineByCodePipelineByCode(BaseModel):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    current_version: Optional["PipelineByCodePipelineByCodeCurrentVersion"] = Field(
        alias="currentVersion"
    )
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    new_template_versions: List["PipelineByCodePipelineByCodeNewTemplateVersions"] = (
        Field(alias="newTemplateVersions")
    )
    notebook_path: Optional[str] = Field(alias="notebookPath")
    permissions: "PipelineByCodePipelineByCodePermissions"
    recipients: List["PipelineByCodePipelineByCodeRecipients"]
    runs: "PipelineByCodePipelineByCodeRuns"
    schedule: Optional[str]
    source_template: Optional["PipelineByCodePipelineByCodeSourceTemplate"] = Field(
        alias="sourceTemplate"
    )
    template: Optional["PipelineByCodePipelineByCodeTemplate"]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    versions: "PipelineByCodePipelineByCodeVersions"
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")
    workspace: "PipelineByCodePipelineByCodeWorkspace"


class PipelineByCodePipelineByCodeCurrentVersion(BaseModel):
    config: Optional[Any]
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    external_link: Optional[Any] = Field(alias="externalLink")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    name: Optional[str]
    parameters: List["PipelineByCodePipelineByCodeCurrentVersionParameters"]
    permissions: "PipelineByCodePipelineByCodeCurrentVersionPermissions"
    pipeline: "PipelineByCodePipelineByCodeCurrentVersionPipeline"
    template_version: Optional[
        "PipelineByCodePipelineByCodeCurrentVersionTemplateVersion"
    ] = Field(alias="templateVersion")
    timeout: Optional[int]
    user: Optional["PipelineByCodePipelineByCodeCurrentVersionUser"]
    version_name: str = Field(alias="versionName")
    version_number: int = Field(alias="versionNumber")
    zipfile: str


class PipelineByCodePipelineByCodeCurrentVersionParameters(BaseModel):
    choices: Optional[List[Any]]
    code: str
    connection: Optional[str]
    default: Optional[Any]
    help: Optional[str]
    multiple: bool
    name: str
    required: bool
    type: ParameterType
    widget: Optional[ParameterWidget]


class PipelineByCodePipelineByCodeCurrentVersionPermissions(BaseModel):
    delete: bool
    update: bool


class PipelineByCodePipelineByCodeCurrentVersionPipeline(BaseModel):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    notebook_path: Optional[str] = Field(alias="notebookPath")
    schedule: Optional[str]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")


class PipelineByCodePipelineByCodeCurrentVersionTemplateVersion(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    version_number: int = Field(alias="versionNumber")


class PipelineByCodePipelineByCodeCurrentVersionUser(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class PipelineByCodePipelineByCodeNewTemplateVersions(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    permissions: "PipelineByCodePipelineByCodeNewTemplateVersionsPermissions"
    template: "PipelineByCodePipelineByCodeNewTemplateVersionsTemplate"
    user: Optional["PipelineByCodePipelineByCodeNewTemplateVersionsUser"]
    version_number: int = Field(alias="versionNumber")


class PipelineByCodePipelineByCodeNewTemplateVersionsPermissions(BaseModel):
    delete: bool
    update: bool


class PipelineByCodePipelineByCodeNewTemplateVersionsTemplate(BaseModel):
    code: str
    config: Optional[str]
    description: Optional[str]
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class PipelineByCodePipelineByCodeNewTemplateVersionsUser(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class PipelineByCodePipelineByCodePermissions(BaseModel):
    create_template_version: (
        "PipelineByCodePipelineByCodePermissionsCreateTemplateVersion"
    ) = Field(alias="createTemplateVersion")
    create_version: bool = Field(alias="createVersion")
    delete: bool
    run: bool
    schedule: bool
    stop_pipeline: bool = Field(alias="stopPipeline")
    update: bool


class PipelineByCodePipelineByCodePermissionsCreateTemplateVersion(BaseModel):
    is_allowed: bool = Field(alias="isAllowed")
    reasons: List[CreateTemplateVersionPermissionReason]


class PipelineByCodePipelineByCodeRecipients(BaseModel):
    id: Any
    notification_level: PipelineNotificationLevel = Field(alias="notificationLevel")
    pipeline: "PipelineByCodePipelineByCodeRecipientsPipeline"
    user: "PipelineByCodePipelineByCodeRecipientsUser"


class PipelineByCodePipelineByCodeRecipientsPipeline(BaseModel):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    notebook_path: Optional[str] = Field(alias="notebookPath")
    schedule: Optional[str]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")


class PipelineByCodePipelineByCodeRecipientsUser(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class PipelineByCodePipelineByCodeRuns(BaseModel):
    items: List["PipelineByCodePipelineByCodeRunsItems"]
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class PipelineByCodePipelineByCodeRunsItems(BaseModel):
    code: str
    config: Any
    duration: Optional[int]
    enable_debug_logs: bool = Field(alias="enableDebugLogs")
    execution_date: Optional[Any] = Field(alias="executionDate")
    id: Any
    logs: Optional[str]
    outputs: List[
        Annotated[
            Union[
                "PipelineByCodePipelineByCodeRunsItemsOutputsBucketObject",
                "PipelineByCodePipelineByCodeRunsItemsOutputsDatabaseTable",
                "PipelineByCodePipelineByCodeRunsItemsOutputsGenericOutput",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    progress: int
    run_id: Any
    send_mail_notifications: bool = Field(alias="sendMailNotifications")
    status: PipelineRunStatus
    timeout: Optional[int]
    trigger_mode: Optional[PipelineRunTrigger] = Field(alias="triggerMode")


class PipelineByCodePipelineByCodeRunsItemsOutputsBucketObject(BaseModel):
    typename__: Literal["BucketObject"] = Field(alias="__typename")
    key: str
    name: str
    path: str
    size: Optional[Any]
    type: BucketObjectType
    updated_at: Optional[Any] = Field(alias="updatedAt")


class PipelineByCodePipelineByCodeRunsItemsOutputsDatabaseTable(BaseModel):
    typename__: Literal["DatabaseTable"] = Field(alias="__typename")
    count: Optional[int]
    name: str
    sample: Any


class PipelineByCodePipelineByCodeRunsItemsOutputsGenericOutput(BaseModel):
    typename__: Literal["GenericOutput"] = Field(alias="__typename")
    generic_name: Optional[str] = Field(alias="genericName")
    generic_type: str = Field(alias="genericType")
    generic_uri: str = Field(alias="genericUri")


class PipelineByCodePipelineByCodeSourceTemplate(BaseModel):
    code: str
    config: Optional[str]
    current_version: Optional[
        "PipelineByCodePipelineByCodeSourceTemplateCurrentVersion"
    ] = Field(alias="currentVersion")
    description: Optional[str]
    id: Any
    name: str
    permissions: "PipelineByCodePipelineByCodeSourceTemplatePermissions"
    source_pipeline: Optional[
        "PipelineByCodePipelineByCodeSourceTemplateSourcePipeline"
    ] = Field(alias="sourcePipeline")
    updated_at: Any = Field(alias="updatedAt")
    versions: "PipelineByCodePipelineByCodeSourceTemplateVersions"
    workspace: Optional["PipelineByCodePipelineByCodeSourceTemplateWorkspace"]


class PipelineByCodePipelineByCodeSourceTemplateCurrentVersion(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    version_number: int = Field(alias="versionNumber")


class PipelineByCodePipelineByCodeSourceTemplatePermissions(BaseModel):
    delete: bool
    update: bool


class PipelineByCodePipelineByCodeSourceTemplateSourcePipeline(BaseModel):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    notebook_path: Optional[str] = Field(alias="notebookPath")
    schedule: Optional[str]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")


class PipelineByCodePipelineByCodeSourceTemplateVersions(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class PipelineByCodePipelineByCodeSourceTemplateWorkspace(BaseModel):
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    docker_image: Optional[str] = Field(alias="dockerImage")
    name: str
    slug: str
    updated_at: Optional[Any] = Field(alias="updatedAt")


class PipelineByCodePipelineByCodeTemplate(BaseModel):
    code: str
    config: Optional[str]
    current_version: Optional["PipelineByCodePipelineByCodeTemplateCurrentVersion"] = (
        Field(alias="currentVersion")
    )
    description: Optional[str]
    id: Any
    name: str
    permissions: "PipelineByCodePipelineByCodeTemplatePermissions"
    source_pipeline: Optional["PipelineByCodePipelineByCodeTemplateSourcePipeline"] = (
        Field(alias="sourcePipeline")
    )
    updated_at: Any = Field(alias="updatedAt")
    versions: "PipelineByCodePipelineByCodeTemplateVersions"
    workspace: Optional["PipelineByCodePipelineByCodeTemplateWorkspace"]


class PipelineByCodePipelineByCodeTemplateCurrentVersion(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    version_number: int = Field(alias="versionNumber")


class PipelineByCodePipelineByCodeTemplatePermissions(BaseModel):
    delete: bool
    update: bool


class PipelineByCodePipelineByCodeTemplateSourcePipeline(BaseModel):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    notebook_path: Optional[str] = Field(alias="notebookPath")
    schedule: Optional[str]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")


class PipelineByCodePipelineByCodeTemplateVersions(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class PipelineByCodePipelineByCodeTemplateWorkspace(BaseModel):
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    docker_image: Optional[str] = Field(alias="dockerImage")
    name: str
    slug: str
    updated_at: Optional[Any] = Field(alias="updatedAt")


class PipelineByCodePipelineByCodeVersions(BaseModel):
    items: List["PipelineByCodePipelineByCodeVersionsItems"]
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class PipelineByCodePipelineByCodeVersionsItems(BaseModel):
    config: Optional[Any]
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    external_link: Optional[Any] = Field(alias="externalLink")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    name: Optional[str]
    timeout: Optional[int]
    version_name: str = Field(alias="versionName")
    version_number: int = Field(alias="versionNumber")
    zipfile: str


class PipelineByCodePipelineByCodeWorkspace(BaseModel):
    bucket: "PipelineByCodePipelineByCodeWorkspaceBucket"
    connections: List["PipelineByCodePipelineByCodeWorkspaceConnections"]
    countries: List["PipelineByCodePipelineByCodeWorkspaceCountries"]
    created_at: Any = Field(alias="createdAt")
    created_by: "PipelineByCodePipelineByCodeWorkspaceCreatedBy" = Field(
        alias="createdBy"
    )
    datasets: "PipelineByCodePipelineByCodeWorkspaceDatasets"
    description: Optional[str]
    docker_image: Optional[str] = Field(alias="dockerImage")
    invitations: "PipelineByCodePipelineByCodeWorkspaceInvitations"
    members: "PipelineByCodePipelineByCodeWorkspaceMembers"
    name: str
    permissions: "PipelineByCodePipelineByCodeWorkspacePermissions"
    slug: str
    updated_at: Optional[Any] = Field(alias="updatedAt")


class PipelineByCodePipelineByCodeWorkspaceBucket(BaseModel):
    name: str


class PipelineByCodePipelineByCodeWorkspaceConnections(BaseModel):
    typename__: Literal[
        "Connection",
        "CustomConnection",
        "DHIS2Connection",
        "GCSConnection",
        "IASOConnection",
        "PostgreSQLConnection",
        "S3Connection",
    ] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    id: str
    name: str
    slug: str
    type: ConnectionType
    updated_at: Optional[Any] = Field(alias="updatedAt")


class PipelineByCodePipelineByCodeWorkspaceCountries(BaseModel):
    alpha_3: str = Field(alias="alpha3")
    code: str
    flag: str
    name: str


class PipelineByCodePipelineByCodeWorkspaceCreatedBy(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class PipelineByCodePipelineByCodeWorkspaceDatasets(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class PipelineByCodePipelineByCodeWorkspaceInvitations(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class PipelineByCodePipelineByCodeWorkspaceMembers(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class PipelineByCodePipelineByCodeWorkspacePermissions(BaseModel):
    create_connection: bool = Field(alias="createConnection")
    create_dataset: bool = Field(alias="createDataset")
    create_object: bool = Field(alias="createObject")
    create_pipeline: bool = Field(alias="createPipeline")
    create_pipeline_template_version: bool = Field(
        alias="createPipelineTemplateVersion"
    )
    delete: bool
    delete_database_table: bool = Field(alias="deleteDatabaseTable")
    delete_object: bool = Field(alias="deleteObject")
    download_object: bool = Field(alias="downloadObject")
    launch_notebook_server: bool = Field(alias="launchNotebookServer")
    manage_members: bool = Field(alias="manageMembers")
    update: bool


PipelineByCode.model_rebuild()
PipelineByCodePipelineByCode.model_rebuild()
PipelineByCodePipelineByCodeCurrentVersion.model_rebuild()
PipelineByCodePipelineByCodeNewTemplateVersions.model_rebuild()
PipelineByCodePipelineByCodePermissions.model_rebuild()
PipelineByCodePipelineByCodeRecipients.model_rebuild()
PipelineByCodePipelineByCodeRuns.model_rebuild()
PipelineByCodePipelineByCodeRunsItems.model_rebuild()
PipelineByCodePipelineByCodeSourceTemplate.model_rebuild()
PipelineByCodePipelineByCodeTemplate.model_rebuild()
PipelineByCodePipelineByCodeVersions.model_rebuild()
PipelineByCodePipelineByCodeWorkspace.model_rebuild()
