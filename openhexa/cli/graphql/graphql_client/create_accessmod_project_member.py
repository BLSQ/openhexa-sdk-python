# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import CreateAccessmodProjectMemberError, PermissionMode


class CreateAccessmodProjectMember(BaseModel):
    create_accessmod_project_member: (
        "CreateAccessmodProjectMemberCreateAccessmodProjectMember"
    ) = Field(alias="createAccessmodProjectMember")


class CreateAccessmodProjectMemberCreateAccessmodProjectMember(BaseModel):
    errors: List[CreateAccessmodProjectMemberError]
    member: Optional["CreateAccessmodProjectMemberCreateAccessmodProjectMemberMember"]
    success: bool


class CreateAccessmodProjectMemberCreateAccessmodProjectMemberMember(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: str
    mode: PermissionMode
    permissions: (
        "CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberPermissions"
    )
    project: "CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberProject"
    team: Optional["CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberTeam"]
    updated_at: Any = Field(alias="updatedAt")
    user: Optional["CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberUser"]


class CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberPermissions(
    BaseModel
):
    delete: bool
    update: bool


class CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberProject(BaseModel):
    created_at: Any = Field(alias="createdAt")
    crs: int
    description: str
    extent: Optional[List[List[float]]]
    id: str
    name: str
    owner: Optional[
        Annotated[
            Union[
                "CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberProjectOwnerTeam",
                "CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberProjectOwnerUser",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    spatial_resolution: int = Field(alias="spatialResolution")
    updated_at: Any = Field(alias="updatedAt")


class CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberProjectOwnerTeam(
    BaseModel
):
    typename__: Literal["Team"] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberProjectOwnerUser(
    BaseModel
):
    typename__: Literal["User"] = Field(alias="__typename")
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberTeam(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberUser(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


CreateAccessmodProjectMember.model_rebuild()
CreateAccessmodProjectMemberCreateAccessmodProjectMember.model_rebuild()
CreateAccessmodProjectMemberCreateAccessmodProjectMemberMember.model_rebuild()
CreateAccessmodProjectMemberCreateAccessmodProjectMemberMemberProject.model_rebuild()
