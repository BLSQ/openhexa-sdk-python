# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccessmodAnalysisStatus,
    AccessmodAnalysisType,
    LaunchAccessmodAnalysisError,
)


class LaunchAccessmodAnalysis(BaseModel):
    launch_accessmod_analysis: "LaunchAccessmodAnalysisLaunchAccessmodAnalysis" = Field(
        alias="launchAccessmodAnalysis"
    )


class LaunchAccessmodAnalysisLaunchAccessmodAnalysis(BaseModel):
    analysis: Optional["LaunchAccessmodAnalysisLaunchAccessmodAnalysisAnalysis"]
    errors: List[LaunchAccessmodAnalysisError]
    success: bool


class LaunchAccessmodAnalysisLaunchAccessmodAnalysisAnalysis(BaseModel):
    typename__: Literal[
        "AccessmodAccessibilityAnalysis",
        "AccessmodAnalysis",
        "AccessmodGeographicCoverageAnalysis",
        "AccessmodZonalStatistics",
    ] = Field(alias="__typename")
    author: "LaunchAccessmodAnalysisLaunchAccessmodAnalysisAnalysisAuthor"
    created_at: Any = Field(alias="createdAt")
    id: str
    name: str
    permissions: "LaunchAccessmodAnalysisLaunchAccessmodAnalysisAnalysisPermissions"
    status: AccessmodAnalysisStatus
    type: AccessmodAnalysisType
    updated_at: Any = Field(alias="updatedAt")


class LaunchAccessmodAnalysisLaunchAccessmodAnalysisAnalysisAuthor(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class LaunchAccessmodAnalysisLaunchAccessmodAnalysisAnalysisPermissions(BaseModel):
    delete: bool
    run: bool
    update: bool


LaunchAccessmodAnalysis.model_rebuild()
LaunchAccessmodAnalysisLaunchAccessmodAnalysis.model_rebuild()
LaunchAccessmodAnalysisLaunchAccessmodAnalysisAnalysis.model_rebuild()
