# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccessmodFilesetMode,
    AccessmodFilesetStatus,
    PermissionMode,
    UpdateAccessmodProjectError,
)


class UpdateAccessmodProject(BaseModel):
    update_accessmod_project: "UpdateAccessmodProjectUpdateAccessmodProject" = Field(
        alias="updateAccessmodProject"
    )


class UpdateAccessmodProjectUpdateAccessmodProject(BaseModel):
    errors: List[UpdateAccessmodProjectError]
    project: Optional["UpdateAccessmodProjectUpdateAccessmodProjectProject"]
    success: bool


class UpdateAccessmodProjectUpdateAccessmodProjectProject(BaseModel):
    author: "UpdateAccessmodProjectUpdateAccessmodProjectProjectAuthor"
    country: "UpdateAccessmodProjectUpdateAccessmodProjectProjectCountry"
    created_at: Any = Field(alias="createdAt")
    crs: int
    dem: Optional["UpdateAccessmodProjectUpdateAccessmodProjectProjectDem"]
    description: str
    extent: Optional[List[List[float]]]
    id: str
    members: List["UpdateAccessmodProjectUpdateAccessmodProjectProjectMembers"]
    name: str
    owner: Optional[
        Annotated[
            Union[
                "UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerTeam",
                "UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerUser",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    permissions: "UpdateAccessmodProjectUpdateAccessmodProjectProjectPermissions"
    spatial_resolution: int = Field(alias="spatialResolution")
    updated_at: Any = Field(alias="updatedAt")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectAuthor(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectCountry(BaseModel):
    alpha_3: str = Field(alias="alpha3")
    code: str
    flag: str
    name: str


class UpdateAccessmodProjectUpdateAccessmodProjectProjectDem(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: str
    metadata: Any
    mode: AccessmodFilesetMode
    name: str
    owner: Optional[
        Annotated[
            Union[
                "UpdateAccessmodProjectUpdateAccessmodProjectProjectDemOwnerTeam",
                "UpdateAccessmodProjectUpdateAccessmodProjectProjectDemOwnerUser",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    status: AccessmodFilesetStatus
    updated_at: Any = Field(alias="updatedAt")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectDemOwnerTeam(BaseModel):
    typename__: Literal["Team"] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectDemOwnerUser(BaseModel):
    typename__: Literal["User"] = Field(alias="__typename")
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectMembers(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: str
    mode: PermissionMode
    updated_at: Any = Field(alias="updatedAt")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerTeam(BaseModel):
    typename__: Literal["Team"] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    id: Any
    memberships: (
        "UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerTeamMemberships"
    )
    name: str
    permissions: (
        "UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerTeamPermissions"
    )
    updated_at: Any = Field(alias="updatedAt")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerTeamMemberships(
    BaseModel
):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerTeamPermissions(
    BaseModel
):
    create_membership: bool = Field(alias="createMembership")
    delete: bool
    update: bool


class UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerUser(BaseModel):
    typename__: Literal["User"] = Field(alias="__typename")
    avatar: "UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerUserAvatar"
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerUserAvatar(BaseModel):
    color: str
    initials: str


class UpdateAccessmodProjectUpdateAccessmodProjectProjectPermissions(BaseModel):
    create_analysis: bool = Field(alias="createAnalysis")
    create_fileset: bool = Field(alias="createFileset")
    create_member: bool = Field(alias="createMember")
    create_permission: bool = Field(alias="createPermission")
    delete: bool
    update: bool


UpdateAccessmodProject.model_rebuild()
UpdateAccessmodProjectUpdateAccessmodProject.model_rebuild()
UpdateAccessmodProjectUpdateAccessmodProjectProject.model_rebuild()
UpdateAccessmodProjectUpdateAccessmodProjectProjectDem.model_rebuild()
UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerTeam.model_rebuild()
UpdateAccessmodProjectUpdateAccessmodProjectProjectOwnerUser.model_rebuild()
