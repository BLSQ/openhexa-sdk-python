# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import PipelineNotificationLevel, PipelineType, UpdatePipelineError


class UpdatePipeline(BaseModel):
    update_pipeline: "UpdatePipelineUpdatePipeline" = Field(alias="updatePipeline")


class UpdatePipelineUpdatePipeline(BaseModel):
    errors: List[UpdatePipelineError]
    pipeline: Optional["UpdatePipelineUpdatePipelinePipeline"]
    success: bool


class UpdatePipelineUpdatePipelinePipeline(BaseModel):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    current_version: Optional["UpdatePipelineUpdatePipelinePipelineCurrentVersion"] = (
        Field(alias="currentVersion")
    )
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    new_template_versions: List[
        "UpdatePipelineUpdatePipelinePipelineNewTemplateVersions"
    ] = Field(alias="newTemplateVersions")
    notebook_path: Optional[str] = Field(alias="notebookPath")
    permissions: "UpdatePipelineUpdatePipelinePipelinePermissions"
    recipients: List["UpdatePipelineUpdatePipelinePipelineRecipients"]
    runs: "UpdatePipelineUpdatePipelinePipelineRuns"
    schedule: Optional[str]
    source_template: Optional["UpdatePipelineUpdatePipelinePipelineSourceTemplate"] = (
        Field(alias="sourceTemplate")
    )
    template: Optional["UpdatePipelineUpdatePipelinePipelineTemplate"]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    versions: "UpdatePipelineUpdatePipelinePipelineVersions"
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")
    workspace: "UpdatePipelineUpdatePipelinePipelineWorkspace"


class UpdatePipelineUpdatePipelinePipelineCurrentVersion(BaseModel):
    config: Optional[Any]
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    external_link: Optional[Any] = Field(alias="externalLink")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    name: Optional[str]
    timeout: Optional[int]
    version_name: str = Field(alias="versionName")
    version_number: int = Field(alias="versionNumber")
    zipfile: str


class UpdatePipelineUpdatePipelinePipelineNewTemplateVersions(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    version_number: int = Field(alias="versionNumber")


class UpdatePipelineUpdatePipelinePipelinePermissions(BaseModel):
    create_version: bool = Field(alias="createVersion")
    delete: bool
    run: bool
    schedule: bool
    stop_pipeline: bool = Field(alias="stopPipeline")
    update: bool


class UpdatePipelineUpdatePipelinePipelineRecipients(BaseModel):
    id: Any
    notification_level: PipelineNotificationLevel = Field(alias="notificationLevel")


class UpdatePipelineUpdatePipelinePipelineRuns(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class UpdatePipelineUpdatePipelinePipelineSourceTemplate(BaseModel):
    code: str
    config: Optional[str]
    description: Optional[str]
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class UpdatePipelineUpdatePipelinePipelineTemplate(BaseModel):
    code: str
    config: Optional[str]
    description: Optional[str]
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class UpdatePipelineUpdatePipelinePipelineVersions(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class UpdatePipelineUpdatePipelinePipelineWorkspace(BaseModel):
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    docker_image: Optional[str] = Field(alias="dockerImage")
    name: str
    slug: str
    updated_at: Optional[Any] = Field(alias="updatedAt")


UpdatePipeline.model_rebuild()
UpdatePipelineUpdatePipeline.model_rebuild()
UpdatePipelineUpdatePipelinePipeline.model_rebuild()
