# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import AccessmodFilesetMode, AccessmodFilesetStatus, PermissionMode


class AccessmodProjects(BaseModel):
    accessmod_projects: "AccessmodProjectsAccessmodProjects" = Field(
        alias="accessmodProjects"
    )


class AccessmodProjectsAccessmodProjects(BaseModel):
    items: List["AccessmodProjectsAccessmodProjectsItems"]
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class AccessmodProjectsAccessmodProjectsItems(BaseModel):
    author: "AccessmodProjectsAccessmodProjectsItemsAuthor"
    country: "AccessmodProjectsAccessmodProjectsItemsCountry"
    created_at: Any = Field(alias="createdAt")
    crs: int
    dem: Optional["AccessmodProjectsAccessmodProjectsItemsDem"]
    description: str
    extent: Optional[List[List[float]]]
    id: str
    members: List["AccessmodProjectsAccessmodProjectsItemsMembers"]
    name: str
    owner: Optional[
        Annotated[
            Union[
                "AccessmodProjectsAccessmodProjectsItemsOwnerTeam",
                "AccessmodProjectsAccessmodProjectsItemsOwnerUser",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    permissions: "AccessmodProjectsAccessmodProjectsItemsPermissions"
    spatial_resolution: int = Field(alias="spatialResolution")
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectsAccessmodProjectsItemsAuthor(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectsAccessmodProjectsItemsCountry(BaseModel):
    alpha_3: str = Field(alias="alpha3")
    code: str
    flag: str
    name: str


class AccessmodProjectsAccessmodProjectsItemsDem(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: str
    metadata: Any
    mode: AccessmodFilesetMode
    name: str
    owner: Optional[
        Annotated[
            Union[
                "AccessmodProjectsAccessmodProjectsItemsDemOwnerTeam",
                "AccessmodProjectsAccessmodProjectsItemsDemOwnerUser",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    status: AccessmodFilesetStatus
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectsAccessmodProjectsItemsDemOwnerTeam(BaseModel):
    typename__: Literal["Team"] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectsAccessmodProjectsItemsDemOwnerUser(BaseModel):
    typename__: Literal["User"] = Field(alias="__typename")
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectsAccessmodProjectsItemsMembers(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: str
    mode: PermissionMode
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectsAccessmodProjectsItemsOwnerTeam(BaseModel):
    typename__: Literal["Team"] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    id: Any
    memberships: "AccessmodProjectsAccessmodProjectsItemsOwnerTeamMemberships"
    name: str
    permissions: "AccessmodProjectsAccessmodProjectsItemsOwnerTeamPermissions"
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectsAccessmodProjectsItemsOwnerTeamMemberships(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class AccessmodProjectsAccessmodProjectsItemsOwnerTeamPermissions(BaseModel):
    create_membership: bool = Field(alias="createMembership")
    delete: bool
    update: bool


class AccessmodProjectsAccessmodProjectsItemsOwnerUser(BaseModel):
    typename__: Literal["User"] = Field(alias="__typename")
    avatar: "AccessmodProjectsAccessmodProjectsItemsOwnerUserAvatar"
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectsAccessmodProjectsItemsOwnerUserAvatar(BaseModel):
    color: str
    initials: str


class AccessmodProjectsAccessmodProjectsItemsPermissions(BaseModel):
    create_analysis: bool = Field(alias="createAnalysis")
    create_fileset: bool = Field(alias="createFileset")
    create_member: bool = Field(alias="createMember")
    create_permission: bool = Field(alias="createPermission")
    delete: bool
    update: bool


AccessmodProjects.model_rebuild()
AccessmodProjectsAccessmodProjects.model_rebuild()
AccessmodProjectsAccessmodProjectsItems.model_rebuild()
AccessmodProjectsAccessmodProjectsItemsDem.model_rebuild()
AccessmodProjectsAccessmodProjectsItemsOwnerTeam.model_rebuild()
AccessmodProjectsAccessmodProjectsItemsOwnerUser.model_rebuild()
