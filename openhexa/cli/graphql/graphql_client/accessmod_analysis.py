# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AccessmodAnalysisStatus, AccessmodAnalysisType


class AccessmodAnalysis(BaseModel):
    accessmod_analysis: Optional["AccessmodAnalysisAccessmodAnalysis"] = Field(
        alias="accessmodAnalysis"
    )


class AccessmodAnalysisAccessmodAnalysis(BaseModel):
    typename__: Literal[
        "AccessmodAccessibilityAnalysis",
        "AccessmodAnalysis",
        "AccessmodGeographicCoverageAnalysis",
        "AccessmodZonalStatistics",
    ] = Field(alias="__typename")
    author: "AccessmodAnalysisAccessmodAnalysisAuthor"
    created_at: Any = Field(alias="createdAt")
    id: str
    name: str
    permissions: "AccessmodAnalysisAccessmodAnalysisPermissions"
    status: AccessmodAnalysisStatus
    type: AccessmodAnalysisType
    updated_at: Any = Field(alias="updatedAt")


class AccessmodAnalysisAccessmodAnalysisAuthor(BaseModel):
    avatar: "AccessmodAnalysisAccessmodAnalysisAuthorAvatar"
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodAnalysisAccessmodAnalysisAuthorAvatar(BaseModel):
    color: str
    initials: str


class AccessmodAnalysisAccessmodAnalysisPermissions(BaseModel):
    delete: bool
    run: bool
    update: bool


AccessmodAnalysis.model_rebuild()
AccessmodAnalysisAccessmodAnalysis.model_rebuild()
AccessmodAnalysisAccessmodAnalysisAuthor.model_rebuild()
