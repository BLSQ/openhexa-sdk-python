# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    BucketObjectType,
    MessagePriority,
    PipelineError,
    PipelineRunStatus,
    PipelineRunTrigger,
    PipelineType,
)


class RunPipeline(BaseModel):
    run_pipeline: "RunPipelineRunPipeline" = Field(alias="runPipeline")


class RunPipelineRunPipeline(BaseModel):
    errors: List[PipelineError]
    run: Optional["RunPipelineRunPipelineRun"]
    success: bool


class RunPipelineRunPipelineRun(BaseModel):
    code: str
    config: Any
    dataset_versions: List["RunPipelineRunPipelineRunDatasetVersions"] = Field(
        alias="datasetVersions"
    )
    duration: Optional[int]
    enable_debug_logs: bool = Field(alias="enableDebugLogs")
    execution_date: Optional[Any] = Field(alias="executionDate")
    id: Any
    logs: Optional[str]
    messages: List["RunPipelineRunPipelineRunMessages"]
    outputs: List[
        Annotated[
            Union[
                "RunPipelineRunPipelineRunOutputsBucketObject",
                "RunPipelineRunPipelineRunOutputsDatabaseTable",
                "RunPipelineRunPipelineRunOutputsGenericOutput",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    pipeline: "RunPipelineRunPipelineRunPipeline"
    progress: int
    run_id: Any
    send_mail_notifications: bool = Field(alias="sendMailNotifications")
    status: PipelineRunStatus
    stopped_by: Optional["RunPipelineRunPipelineRunStoppedBy"] = Field(
        alias="stoppedBy"
    )
    timeout: Optional[int]
    trigger_mode: Optional[PipelineRunTrigger] = Field(alias="triggerMode")
    user: Optional["RunPipelineRunPipelineRunUser"]
    version: Optional["RunPipelineRunPipelineRunVersion"]


class RunPipelineRunPipelineRunDatasetVersions(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: str
    name: str
    target_id: Any = Field(alias="targetId")


class RunPipelineRunPipelineRunMessages(BaseModel):
    message: str
    priority: MessagePriority
    timestamp: Optional[Any]


class RunPipelineRunPipelineRunOutputsBucketObject(BaseModel):
    typename__: Literal["BucketObject"] = Field(alias="__typename")
    key: str
    name: str
    path: str
    size: Optional[Any]
    type: BucketObjectType
    updated_at: Optional[Any] = Field(alias="updatedAt")


class RunPipelineRunPipelineRunOutputsDatabaseTable(BaseModel):
    typename__: Literal["DatabaseTable"] = Field(alias="__typename")
    columns: List["RunPipelineRunPipelineRunOutputsDatabaseTableColumns"]
    count: Optional[int]
    name: str
    rows: "RunPipelineRunPipelineRunOutputsDatabaseTableRows"
    sample: Any


class RunPipelineRunPipelineRunOutputsDatabaseTableColumns(BaseModel):
    name: str
    type: str


class RunPipelineRunPipelineRunOutputsDatabaseTableRows(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    items: List[Any]
    page_number: int = Field(alias="pageNumber")


class RunPipelineRunPipelineRunOutputsGenericOutput(BaseModel):
    typename__: Literal["GenericOutput"] = Field(alias="__typename")
    generic_name: Optional[str] = Field(alias="genericName")
    generic_type: str = Field(alias="genericType")
    generic_uri: str = Field(alias="genericUri")


class RunPipelineRunPipelineRunPipeline(BaseModel):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    notebook_path: Optional[str] = Field(alias="notebookPath")
    schedule: Optional[str]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")


class RunPipelineRunPipelineRunStoppedBy(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class RunPipelineRunPipelineRunUser(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class RunPipelineRunPipelineRunVersion(BaseModel):
    config: Optional[Any]
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    external_link: Optional[Any] = Field(alias="externalLink")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    name: Optional[str]
    timeout: Optional[int]
    version_name: str = Field(alias="versionName")
    version_number: int = Field(alias="versionNumber")
    zipfile: str


RunPipeline.model_rebuild()
RunPipelineRunPipeline.model_rebuild()
RunPipelineRunPipelineRun.model_rebuild()
RunPipelineRunPipelineRunOutputsDatabaseTable.model_rebuild()
