# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccessmodFilesetFormat,
    AccessmodFilesetMode,
    AccessmodFilesetRoleCode,
    AccessmodFilesetStatus,
    PermissionMode,
)


class AccessmodProject(BaseModel):
    accessmod_project: Optional["AccessmodProjectAccessmodProject"] = Field(
        alias="accessmodProject"
    )


class AccessmodProjectAccessmodProject(BaseModel):
    author: "AccessmodProjectAccessmodProjectAuthor"
    country: "AccessmodProjectAccessmodProjectCountry"
    created_at: Any = Field(alias="createdAt")
    crs: int
    dem: Optional["AccessmodProjectAccessmodProjectDem"]
    description: str
    extent: Optional[List[List[float]]]
    id: str
    members: List["AccessmodProjectAccessmodProjectMembers"]
    name: str
    owner: Optional[
        Annotated[
            Union[
                "AccessmodProjectAccessmodProjectOwnerTeam",
                "AccessmodProjectAccessmodProjectOwnerUser",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    permissions: "AccessmodProjectAccessmodProjectPermissions"
    spatial_resolution: int = Field(alias="spatialResolution")
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectAccessmodProjectAuthor(BaseModel):
    avatar: "AccessmodProjectAccessmodProjectAuthorAvatar"
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectAccessmodProjectAuthorAvatar(BaseModel):
    color: str
    initials: str


class AccessmodProjectAccessmodProjectCountry(BaseModel):
    alpha_3: str = Field(alias="alpha3")
    code: str
    flag: str
    name: str
    who_info: "AccessmodProjectAccessmodProjectCountryWhoInfo" = Field(alias="whoInfo")


class AccessmodProjectAccessmodProjectCountryWhoInfo(BaseModel):
    default_crs: int = Field(alias="defaultCRS")
    simplified_extent: Optional[Any] = Field(alias="simplifiedExtent")


class AccessmodProjectAccessmodProjectDem(BaseModel):
    author: "AccessmodProjectAccessmodProjectDemAuthor"
    created_at: Any = Field(alias="createdAt")
    files: List["AccessmodProjectAccessmodProjectDemFiles"]
    id: str
    metadata: Any
    mode: AccessmodFilesetMode
    name: str
    owner: Optional[
        Annotated[
            Union[
                "AccessmodProjectAccessmodProjectDemOwnerTeam",
                "AccessmodProjectAccessmodProjectDemOwnerUser",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    permissions: "AccessmodProjectAccessmodProjectDemPermissions"
    role: "AccessmodProjectAccessmodProjectDemRole"
    status: AccessmodFilesetStatus
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectAccessmodProjectDemAuthor(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectAccessmodProjectDemFiles(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: str
    mime_type: str = Field(alias="mimeType")
    name: str
    updated_at: Any = Field(alias="updatedAt")
    uri: str


class AccessmodProjectAccessmodProjectDemOwnerTeam(BaseModel):
    typename__: Literal["Team"] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    id: Any
    memberships: "AccessmodProjectAccessmodProjectDemOwnerTeamMemberships"
    name: str
    permissions: "AccessmodProjectAccessmodProjectDemOwnerTeamPermissions"
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectAccessmodProjectDemOwnerTeamMemberships(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class AccessmodProjectAccessmodProjectDemOwnerTeamPermissions(BaseModel):
    create_membership: bool = Field(alias="createMembership")
    delete: bool
    update: bool


class AccessmodProjectAccessmodProjectDemOwnerUser(BaseModel):
    typename__: Literal["User"] = Field(alias="__typename")
    avatar: "AccessmodProjectAccessmodProjectDemOwnerUserAvatar"
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectAccessmodProjectDemOwnerUserAvatar(BaseModel):
    color: str
    initials: str


class AccessmodProjectAccessmodProjectDemPermissions(BaseModel):
    create_file: bool = Field(alias="createFile")
    delete: bool
    update: bool


class AccessmodProjectAccessmodProjectDemRole(BaseModel):
    code: AccessmodFilesetRoleCode
    created_at: Any = Field(alias="createdAt")
    format: AccessmodFilesetFormat
    id: str
    name: str
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectAccessmodProjectMembers(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: str
    mode: PermissionMode
    permissions: "AccessmodProjectAccessmodProjectMembersPermissions"
    project: "AccessmodProjectAccessmodProjectMembersProject"
    team: Optional["AccessmodProjectAccessmodProjectMembersTeam"]
    updated_at: Any = Field(alias="updatedAt")
    user: Optional["AccessmodProjectAccessmodProjectMembersUser"]


class AccessmodProjectAccessmodProjectMembersPermissions(BaseModel):
    delete: bool
    update: bool


class AccessmodProjectAccessmodProjectMembersProject(BaseModel):
    created_at: Any = Field(alias="createdAt")
    crs: int
    description: str
    extent: Optional[List[List[float]]]
    id: str
    name: str
    owner: Optional[
        Annotated[
            Union[
                "AccessmodProjectAccessmodProjectMembersProjectOwnerTeam",
                "AccessmodProjectAccessmodProjectMembersProjectOwnerUser",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    spatial_resolution: int = Field(alias="spatialResolution")
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectAccessmodProjectMembersProjectOwnerTeam(BaseModel):
    typename__: Literal["Team"] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectAccessmodProjectMembersProjectOwnerUser(BaseModel):
    typename__: Literal["User"] = Field(alias="__typename")
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectAccessmodProjectMembersTeam(BaseModel):
    created_at: Any = Field(alias="createdAt")
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectAccessmodProjectMembersUser(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectAccessmodProjectOwnerTeam(BaseModel):
    typename__: Literal["Team"] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class AccessmodProjectAccessmodProjectOwnerUser(BaseModel):
    typename__: Literal["User"] = Field(alias="__typename")
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class AccessmodProjectAccessmodProjectPermissions(BaseModel):
    create_analysis: bool = Field(alias="createAnalysis")
    create_fileset: bool = Field(alias="createFileset")
    create_member: bool = Field(alias="createMember")
    create_permission: bool = Field(alias="createPermission")
    delete: bool
    update: bool


AccessmodProject.model_rebuild()
AccessmodProjectAccessmodProject.model_rebuild()
AccessmodProjectAccessmodProjectAuthor.model_rebuild()
AccessmodProjectAccessmodProjectCountry.model_rebuild()
AccessmodProjectAccessmodProjectDem.model_rebuild()
AccessmodProjectAccessmodProjectDemOwnerTeam.model_rebuild()
AccessmodProjectAccessmodProjectDemOwnerUser.model_rebuild()
AccessmodProjectAccessmodProjectMembers.model_rebuild()
AccessmodProjectAccessmodProjectMembersProject.model_rebuild()
