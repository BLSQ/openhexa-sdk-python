# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    CreatePipelineFromTemplateVersionError,
    PipelineNotificationLevel,
    PipelineType,
)


class CreatePipelineFromTemplateVersion(BaseModel):
    create_pipeline_from_template_version: (
        "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersion"
    ) = Field(alias="createPipelineFromTemplateVersion")


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersion(BaseModel):
    errors: Optional[List[CreatePipelineFromTemplateVersionError]]
    pipeline: Optional[
        "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipeline"
    ]
    success: bool


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipeline(
    BaseModel
):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    current_version: Optional[
        "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineCurrentVersion"
    ] = Field(alias="currentVersion")
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    new_template_versions: List[
        "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineNewTemplateVersions"
    ] = Field(alias="newTemplateVersions")
    notebook_path: Optional[str] = Field(alias="notebookPath")
    permissions: "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelinePermissions"
    recipients: List[
        "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineRecipients"
    ]
    runs: (
        "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineRuns"
    )
    schedule: Optional[str]
    source_template: Optional[
        "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineSourceTemplate"
    ] = Field(alias="sourceTemplate")
    template: Optional[
        "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineTemplate"
    ]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    versions: "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineVersions"
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")
    workspace: "CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineWorkspace"


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineCurrentVersion(
    BaseModel
):
    config: Optional[Any]
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    external_link: Optional[Any] = Field(alias="externalLink")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    name: Optional[str]
    timeout: Optional[int]
    version_name: str = Field(alias="versionName")
    version_number: int = Field(alias="versionNumber")
    zipfile: str


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineNewTemplateVersions(
    BaseModel
):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    version_number: int = Field(alias="versionNumber")


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelinePermissions(
    BaseModel
):
    create_version: bool = Field(alias="createVersion")
    delete: bool
    run: bool
    schedule: bool
    stop_pipeline: bool = Field(alias="stopPipeline")
    update: bool


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineRecipients(
    BaseModel
):
    id: Any
    notification_level: PipelineNotificationLevel = Field(alias="notificationLevel")


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineRuns(
    BaseModel
):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineSourceTemplate(
    BaseModel
):
    code: str
    config: Optional[str]
    description: Optional[str]
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineTemplate(
    BaseModel
):
    code: str
    config: Optional[str]
    description: Optional[str]
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineVersions(
    BaseModel
):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipelineWorkspace(
    BaseModel
):
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    docker_image: Optional[str] = Field(alias="dockerImage")
    name: str
    slug: str
    updated_at: Optional[Any] = Field(alias="updatedAt")


CreatePipelineFromTemplateVersion.model_rebuild()
CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersion.model_rebuild()
CreatePipelineFromTemplateVersionCreatePipelineFromTemplateVersionPipeline.model_rebuild()
