# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import UpdateDAGError


class UpdateDAG(BaseModel):
    update_dag: "UpdateDAGUpdateDag" = Field(alias="updateDAG")


class UpdateDAGUpdateDag(BaseModel):
    dag: Optional["UpdateDAGUpdateDagDag"]
    errors: List[UpdateDAGError]
    success: bool


class UpdateDAGUpdateDagDag(BaseModel):
    countries: List["UpdateDAGUpdateDagDagCountries"]
    description: Optional[str]
    external_id: str = Field(alias="externalId")
    external_url: Optional[Any] = Field(alias="externalUrl")
    form_code: Optional[str] = Field(alias="formCode")
    id: Any
    label: str
    runs: "UpdateDAGUpdateDagDagRuns"
    schedule: Optional[str]
    tags: List["UpdateDAGUpdateDagDagTags"]
    template: "UpdateDAGUpdateDagDagTemplate"
    user: Optional["UpdateDAGUpdateDagDagUser"]


class UpdateDAGUpdateDagDagCountries(BaseModel):
    alpha_3: str = Field(alias="alpha3")
    code: str
    flag: str
    name: str


class UpdateDAGUpdateDagDagRuns(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class UpdateDAGUpdateDagDagTags(BaseModel):
    id: str
    name: str


class UpdateDAGUpdateDagDagTemplate(BaseModel):
    code: str
    description: Optional[str]
    sample_config: Optional[Any] = Field(alias="sampleConfig")


class UpdateDAGUpdateDagDagUser(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


UpdateDAG.model_rebuild()
UpdateDAGUpdateDag.model_rebuild()
UpdateDAGUpdateDagDag.model_rebuild()
