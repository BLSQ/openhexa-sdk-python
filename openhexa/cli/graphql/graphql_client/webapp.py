# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ConnectionType


class Webapp(BaseModel):
    webapp: Optional["WebappWebapp"]


class WebappWebapp(BaseModel):
    created_by: "WebappWebappCreatedBy" = Field(alias="createdBy")
    description: Optional[str]
    icon: Optional[str]
    id: Any
    is_favorite: bool = Field(alias="isFavorite")
    name: str
    permissions: "WebappWebappPermissions"
    url: str
    workspace: "WebappWebappWorkspace"


class WebappWebappCreatedBy(BaseModel):
    avatar: "WebappWebappCreatedByAvatar"
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class WebappWebappCreatedByAvatar(BaseModel):
    color: str
    initials: str


class WebappWebappPermissions(BaseModel):
    delete: bool
    update: bool


class WebappWebappWorkspace(BaseModel):
    bucket: "WebappWebappWorkspaceBucket"
    connections: List["WebappWebappWorkspaceConnections"]
    countries: List["WebappWebappWorkspaceCountries"]
    created_at: Any = Field(alias="createdAt")
    created_by: "WebappWebappWorkspaceCreatedBy" = Field(alias="createdBy")
    datasets: "WebappWebappWorkspaceDatasets"
    description: Optional[str]
    docker_image: Optional[str] = Field(alias="dockerImage")
    invitations: "WebappWebappWorkspaceInvitations"
    members: "WebappWebappWorkspaceMembers"
    name: str
    permissions: "WebappWebappWorkspacePermissions"
    slug: str
    updated_at: Optional[Any] = Field(alias="updatedAt")


class WebappWebappWorkspaceBucket(BaseModel):
    name: str


class WebappWebappWorkspaceConnections(BaseModel):
    typename__: Literal[
        "Connection",
        "CustomConnection",
        "DHIS2Connection",
        "GCSConnection",
        "IASOConnection",
        "PostgreSQLConnection",
        "S3Connection",
    ] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    id: str
    name: str
    slug: str
    type: ConnectionType
    updated_at: Optional[Any] = Field(alias="updatedAt")


class WebappWebappWorkspaceCountries(BaseModel):
    alpha_3: str = Field(alias="alpha3")
    code: str
    flag: str
    name: str


class WebappWebappWorkspaceCreatedBy(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class WebappWebappWorkspaceDatasets(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class WebappWebappWorkspaceInvitations(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class WebappWebappWorkspaceMembers(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class WebappWebappWorkspacePermissions(BaseModel):
    create_connection: bool = Field(alias="createConnection")
    create_dataset: bool = Field(alias="createDataset")
    create_object: bool = Field(alias="createObject")
    create_pipeline: bool = Field(alias="createPipeline")
    create_pipeline_template_version: bool = Field(
        alias="createPipelineTemplateVersion"
    )
    delete: bool
    delete_database_table: bool = Field(alias="deleteDatabaseTable")
    delete_object: bool = Field(alias="deleteObject")
    download_object: bool = Field(alias="downloadObject")
    launch_notebook_server: bool = Field(alias="launchNotebookServer")
    manage_members: bool = Field(alias="manageMembers")
    update: bool


Webapp.model_rebuild()
WebappWebapp.model_rebuild()
WebappWebappCreatedBy.model_rebuild()
WebappWebappWorkspace.model_rebuild()
