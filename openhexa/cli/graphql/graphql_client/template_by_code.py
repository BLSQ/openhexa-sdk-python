# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ConnectionType, PipelineNotificationLevel, PipelineType


class TemplateByCode(BaseModel):
    template_by_code: Optional["TemplateByCodeTemplateByCode"] = Field(
        alias="templateByCode"
    )


class TemplateByCodeTemplateByCode(BaseModel):
    code: str
    config: Optional[str]
    current_version: Optional["TemplateByCodeTemplateByCodeCurrentVersion"] = Field(
        alias="currentVersion"
    )
    description: Optional[str]
    id: Any
    name: str
    permissions: "TemplateByCodeTemplateByCodePermissions"
    source_pipeline: Optional["TemplateByCodeTemplateByCodeSourcePipeline"] = Field(
        alias="sourcePipeline"
    )
    updated_at: Any = Field(alias="updatedAt")
    versions: "TemplateByCodeTemplateByCodeVersions"
    workspace: Optional["TemplateByCodeTemplateByCodeWorkspace"]


class TemplateByCodeTemplateByCodeCurrentVersion(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    permissions: "TemplateByCodeTemplateByCodeCurrentVersionPermissions"
    template: "TemplateByCodeTemplateByCodeCurrentVersionTemplate"
    user: Optional["TemplateByCodeTemplateByCodeCurrentVersionUser"]
    version_number: int = Field(alias="versionNumber")


class TemplateByCodeTemplateByCodeCurrentVersionPermissions(BaseModel):
    delete: bool
    update: bool


class TemplateByCodeTemplateByCodeCurrentVersionTemplate(BaseModel):
    code: str
    config: Optional[str]
    description: Optional[str]
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class TemplateByCodeTemplateByCodeCurrentVersionUser(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class TemplateByCodeTemplateByCodePermissions(BaseModel):
    delete: bool
    update: bool


class TemplateByCodeTemplateByCodeSourcePipeline(BaseModel):
    code: str
    config: Any
    created_at: Any = Field(alias="createdAt")
    current_version: Optional[
        "TemplateByCodeTemplateByCodeSourcePipelineCurrentVersion"
    ] = Field(alias="currentVersion")
    description: Optional[str]
    has_new_template_versions: bool = Field(alias="hasNewTemplateVersions")
    id: Any
    name: Optional[str]
    new_template_versions: List[
        "TemplateByCodeTemplateByCodeSourcePipelineNewTemplateVersions"
    ] = Field(alias="newTemplateVersions")
    notebook_path: Optional[str] = Field(alias="notebookPath")
    permissions: "TemplateByCodeTemplateByCodeSourcePipelinePermissions"
    recipients: List["TemplateByCodeTemplateByCodeSourcePipelineRecipients"]
    runs: "TemplateByCodeTemplateByCodeSourcePipelineRuns"
    schedule: Optional[str]
    source_template: Optional[
        "TemplateByCodeTemplateByCodeSourcePipelineSourceTemplate"
    ] = Field(alias="sourceTemplate")
    template: Optional["TemplateByCodeTemplateByCodeSourcePipelineTemplate"]
    type: PipelineType
    updated_at: Optional[Any] = Field(alias="updatedAt")
    versions: "TemplateByCodeTemplateByCodeSourcePipelineVersions"
    webhook_enabled: bool = Field(alias="webhookEnabled")
    webhook_url: Optional[str] = Field(alias="webhookUrl")
    workspace: "TemplateByCodeTemplateByCodeSourcePipelineWorkspace"


class TemplateByCodeTemplateByCodeSourcePipelineCurrentVersion(BaseModel):
    config: Optional[Any]
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    external_link: Optional[Any] = Field(alias="externalLink")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    name: Optional[str]
    timeout: Optional[int]
    version_name: str = Field(alias="versionName")
    version_number: int = Field(alias="versionNumber")
    zipfile: str


class TemplateByCodeTemplateByCodeSourcePipelineNewTemplateVersions(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    version_number: int = Field(alias="versionNumber")


class TemplateByCodeTemplateByCodeSourcePipelinePermissions(BaseModel):
    create_version: bool = Field(alias="createVersion")
    delete: bool
    run: bool
    schedule: bool
    stop_pipeline: bool = Field(alias="stopPipeline")
    update: bool


class TemplateByCodeTemplateByCodeSourcePipelineRecipients(BaseModel):
    id: Any
    notification_level: PipelineNotificationLevel = Field(alias="notificationLevel")


class TemplateByCodeTemplateByCodeSourcePipelineRuns(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class TemplateByCodeTemplateByCodeSourcePipelineSourceTemplate(BaseModel):
    code: str
    config: Optional[str]
    description: Optional[str]
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class TemplateByCodeTemplateByCodeSourcePipelineTemplate(BaseModel):
    code: str
    config: Optional[str]
    description: Optional[str]
    id: Any
    name: str
    updated_at: Any = Field(alias="updatedAt")


class TemplateByCodeTemplateByCodeSourcePipelineVersions(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class TemplateByCodeTemplateByCodeSourcePipelineWorkspace(BaseModel):
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    docker_image: Optional[str] = Field(alias="dockerImage")
    name: str
    slug: str
    updated_at: Optional[Any] = Field(alias="updatedAt")


class TemplateByCodeTemplateByCodeVersions(BaseModel):
    items: List["TemplateByCodeTemplateByCodeVersionsItems"]
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class TemplateByCodeTemplateByCodeVersionsItems(BaseModel):
    changelog: Optional[str]
    created_at: Any = Field(alias="createdAt")
    id: Any
    is_latest_version: bool = Field(alias="isLatestVersion")
    version_number: int = Field(alias="versionNumber")


class TemplateByCodeTemplateByCodeWorkspace(BaseModel):
    bucket: "TemplateByCodeTemplateByCodeWorkspaceBucket"
    connections: List["TemplateByCodeTemplateByCodeWorkspaceConnections"]
    countries: List["TemplateByCodeTemplateByCodeWorkspaceCountries"]
    created_at: Any = Field(alias="createdAt")
    created_by: "TemplateByCodeTemplateByCodeWorkspaceCreatedBy" = Field(
        alias="createdBy"
    )
    datasets: "TemplateByCodeTemplateByCodeWorkspaceDatasets"
    description: Optional[str]
    docker_image: Optional[str] = Field(alias="dockerImage")
    invitations: "TemplateByCodeTemplateByCodeWorkspaceInvitations"
    members: "TemplateByCodeTemplateByCodeWorkspaceMembers"
    name: str
    permissions: "TemplateByCodeTemplateByCodeWorkspacePermissions"
    slug: str
    updated_at: Optional[Any] = Field(alias="updatedAt")


class TemplateByCodeTemplateByCodeWorkspaceBucket(BaseModel):
    name: str


class TemplateByCodeTemplateByCodeWorkspaceConnections(BaseModel):
    typename__: Literal[
        "Connection",
        "CustomConnection",
        "DHIS2Connection",
        "GCSConnection",
        "IASOConnection",
        "PostgreSQLConnection",
        "S3Connection",
    ] = Field(alias="__typename")
    created_at: Any = Field(alias="createdAt")
    description: Optional[str]
    id: str
    name: str
    slug: str
    type: ConnectionType
    updated_at: Optional[Any] = Field(alias="updatedAt")


class TemplateByCodeTemplateByCodeWorkspaceCountries(BaseModel):
    alpha_3: str = Field(alias="alpha3")
    code: str
    flag: str
    name: str


class TemplateByCodeTemplateByCodeWorkspaceCreatedBy(BaseModel):
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class TemplateByCodeTemplateByCodeWorkspaceDatasets(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class TemplateByCodeTemplateByCodeWorkspaceInvitations(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class TemplateByCodeTemplateByCodeWorkspaceMembers(BaseModel):
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class TemplateByCodeTemplateByCodeWorkspacePermissions(BaseModel):
    create_connection: bool = Field(alias="createConnection")
    create_dataset: bool = Field(alias="createDataset")
    create_object: bool = Field(alias="createObject")
    create_pipeline: bool = Field(alias="createPipeline")
    create_pipeline_template_version: bool = Field(
        alias="createPipelineTemplateVersion"
    )
    delete: bool
    delete_database_table: bool = Field(alias="deleteDatabaseTable")
    delete_object: bool = Field(alias="deleteObject")
    download_object: bool = Field(alias="downloadObject")
    launch_notebook_server: bool = Field(alias="launchNotebookServer")
    manage_members: bool = Field(alias="manageMembers")
    update: bool


TemplateByCode.model_rebuild()
TemplateByCodeTemplateByCode.model_rebuild()
TemplateByCodeTemplateByCodeCurrentVersion.model_rebuild()
TemplateByCodeTemplateByCodeSourcePipeline.model_rebuild()
TemplateByCodeTemplateByCodeVersions.model_rebuild()
TemplateByCodeTemplateByCodeWorkspace.model_rebuild()
