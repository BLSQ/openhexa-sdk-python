# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import DAGRunStatus, DAGRunTrigger


class Dag(BaseModel):
    dag: Optional["DagDag"]


class DagDag(BaseModel):
    countries: List["DagDagCountries"]
    description: Optional[str]
    external_id: str = Field(alias="externalId")
    external_url: Optional[Any] = Field(alias="externalUrl")
    form_code: Optional[str] = Field(alias="formCode")
    id: Any
    label: str
    runs: "DagDagRuns"
    schedule: Optional[str]
    tags: List["DagDagTags"]
    template: "DagDagTemplate"
    user: Optional["DagDagUser"]


class DagDagCountries(BaseModel):
    alpha_3: str = Field(alias="alpha3")
    code: str
    flag: str
    name: str
    who_info: "DagDagCountriesWhoInfo" = Field(alias="whoInfo")


class DagDagCountriesWhoInfo(BaseModel):
    default_crs: int = Field(alias="defaultCRS")
    simplified_extent: Optional[Any] = Field(alias="simplifiedExtent")


class DagDagRuns(BaseModel):
    items: List["DagDagRunsItems"]
    page_number: int = Field(alias="pageNumber")
    total_items: int = Field(alias="totalItems")
    total_pages: int = Field(alias="totalPages")


class DagDagRunsItems(BaseModel):
    config: Optional[Any]
    duration: Optional[int]
    execution_date: Optional[Any] = Field(alias="executionDate")
    external_id: Optional[str] = Field(alias="externalId")
    external_url: Optional[Any] = Field(alias="externalUrl")
    id: Any
    is_favorite: bool = Field(alias="isFavorite")
    label: Optional[str]
    last_refreshed_at: Optional[Any] = Field(alias="lastRefreshedAt")
    logs: Optional[str]
    progress: int
    status: DAGRunStatus
    trigger_mode: Optional[DAGRunTrigger] = Field(alias="triggerMode")


class DagDagTags(BaseModel):
    id: str
    name: str


class DagDagTemplate(BaseModel):
    code: str
    description: Optional[str]
    sample_config: Optional[Any] = Field(alias="sampleConfig")


class DagDagUser(BaseModel):
    avatar: "DagDagUserAvatar"
    date_joined: Any = Field(alias="dateJoined")
    display_name: str = Field(alias="displayName")
    email: str
    first_name: Optional[str] = Field(alias="firstName")
    id: Any
    language: str
    last_login: Optional[Any] = Field(alias="lastLogin")
    last_name: Optional[str] = Field(alias="lastName")


class DagDagUserAvatar(BaseModel):
    color: str
    initials: str


Dag.model_rebuild()
DagDag.model_rebuild()
DagDagCountries.model_rebuild()
DagDagRuns.model_rebuild()
DagDagUser.model_rebuild()
