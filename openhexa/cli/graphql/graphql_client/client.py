# Generated by ariadne-codegen
# Source: openhexa/cli/graphql/queries

from typing import Any, Dict, List, Optional, Union

from .accessmod_access_requests import AccessmodAccessRequests
from .accessmod_analyses import AccessmodAnalyses
from .accessmod_analysis import AccessmodAnalysis
from .accessmod_fileset import AccessmodFileset
from .accessmod_fileset_role import AccessmodFilesetRole
from .accessmod_fileset_roles import AccessmodFilesetRoles
from .accessmod_filesets import AccessmodFilesets
from .accessmod_project import AccessmodProject
from .accessmod_projects import AccessmodProjects
from .add_pipeline_output import AddPipelineOutput
from .add_pipeline_recipient import AddPipelineRecipient
from .add_to_favorites import AddToFavorites
from .approve_accessmod_access_request import ApproveAccessmodAccessRequest
from .archive_workspace import ArchiveWorkspace
from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .boundaries import Boundaries
from .config import Config
from .connection import Connection
from .connection_by_slug import ConnectionBySlug
from .countries import Countries
from .country import Country
from .create_accessmod_accessibility_analysis import (
    CreateAccessmodAccessibilityAnalysis,
)
from .create_accessmod_file import CreateAccessmodFile
from .create_accessmod_fileset import CreateAccessmodFileset
from .create_accessmod_project import CreateAccessmodProject
from .create_accessmod_project_member import CreateAccessmodProjectMember
from .create_accessmod_zonal_statistics import CreateAccessmodZonalStatistics
from .create_bucket_folder import CreateBucketFolder
from .create_connection import CreateConnection
from .create_dataset import CreateDataset
from .create_dataset_version import CreateDatasetVersion
from .create_dataset_version_file import CreateDatasetVersionFile
from .create_membership import CreateMembership
from .create_pipeline import CreatePipeline
from .create_pipeline_from_template_version import CreatePipelineFromTemplateVersion
from .create_pipeline_template_version import CreatePipelineTemplateVersion
from .create_team import CreateTeam
from .create_webapp import CreateWebapp
from .create_workspace import CreateWorkspace
from .dag import Dag
from .dag_run import DagRun
from .dags import Dags
from .database_table import DatabaseTable
from .dataset import Dataset
from .dataset_link import DatasetLink
from .dataset_link_by_slug import DatasetLinkBySlug
from .dataset_version import DatasetVersion
from .dataset_version_file import DatasetVersionFile
from .datasets import Datasets
from .decline_workspace_invitation import DeclineWorkspaceInvitation
from .delete_accessmod_analysis import DeleteAccessmodAnalysis
from .delete_accessmod_fileset import DeleteAccessmodFileset
from .delete_accessmod_project import DeleteAccessmodProject
from .delete_accessmod_project_member import DeleteAccessmodProjectMember
from .delete_bucket_object import DeleteBucketObject
from .delete_connection import DeleteConnection
from .delete_dataset import DeleteDataset
from .delete_dataset_link import DeleteDatasetLink
from .delete_dataset_version import DeleteDatasetVersion
from .delete_membership import DeleteMembership
from .delete_metadata_attribute import DeleteMetadataAttribute
from .delete_pipeline import DeletePipeline
from .delete_pipeline_recipient import DeletePipelineRecipient
from .delete_pipeline_template import DeletePipelineTemplate
from .delete_pipeline_version import DeletePipelineVersion
from .delete_team import DeleteTeam
from .delete_template_version import DeleteTemplateVersion
from .delete_webapp import DeleteWebapp
from .delete_workspace import DeleteWorkspace
from .delete_workspace_database_table import DeleteWorkspaceDatabaseTable
from .delete_workspace_invitation import DeleteWorkspaceInvitation
from .delete_workspace_member import DeleteWorkspaceMember
from .deny_accessmod_access_request import DenyAccessmodAccessRequest
from .disable_two_factor import DisableTwoFactor
from .enable_two_factor import EnableTwoFactor
from .enums import (
    AccessmodFilesetMode,
    AccessmodProjectOrder,
    DAGRunOrderBy,
    OrderByDirection,
    PipelineRunOrderBy,
)
from .generate_challenge import GenerateChallenge
from .generate_dataset_upload_url import GenerateDatasetUploadUrl
from .generate_new_database_password import GenerateNewDatabasePassword
from .generate_pipeline_webhook_url import GeneratePipelineWebhookUrl
from .generate_workspace_token import GenerateWorkspaceToken
from .get_countries import GetCountries
from .input_types import (
    AddPipelineOutputInput,
    AddToFavoritesInput,
    ApproveAccessmodAccessRequestInput,
    ArchiveWorkspaceInput,
    CreateAccessmodAccessibilityAnalysisInput,
    CreateAccessmodFileInput,
    CreateAccessmodFilesetInput,
    CreateAccessmodProjectInput,
    CreateAccessmodProjectMemberInput,
    CreateAccessmodZonalStatisticsInput,
    CreateBucketFolderInput,
    CreateConnectionInput,
    CreateDatasetInput,
    CreateDatasetVersionFileInput,
    CreateDatasetVersionInput,
    CreateMembershipInput,
    CreatePipelineFromTemplateVersionInput,
    CreatePipelineInput,
    CreatePipelineRecipientInput,
    CreatePipelineTemplateVersionInput,
    CreateTeamInput,
    CreateWebappInput,
    CreateWorkspaceInput,
    DeclineWorkspaceInvitationInput,
    DeleteAccessmodAnalysisInput,
    DeleteAccessmodFilesetInput,
    DeleteAccessmodProjectInput,
    DeleteAccessmodProjectMemberInput,
    DeleteBucketObjectInput,
    DeleteConnectionInput,
    DeleteDatasetInput,
    DeleteDatasetLinkInput,
    DeleteDatasetVersionInput,
    DeleteMembershipInput,
    DeleteMetadataAttributeInput,
    DeletePipelineInput,
    DeletePipelineRecipientInput,
    DeletePipelineTemplateInput,
    DeletePipelineVersionInput,
    DeleteTeamInput,
    DeleteTemplateVersionInput,
    DeleteWebappInput,
    DeleteWorkspaceDatabaseTableInput,
    DeleteWorkspaceInput,
    DeleteWorkspaceInvitationInput,
    DeleteWorkspaceMemberInput,
    DenyAccessmodAccessRequestInput,
    DisableTwoFactorInput,
    EnableTwoFactorInput,
    GenerateDatasetUploadUrlInput,
    GenerateNewDatabasePasswordInput,
    GeneratePipelineWebhookUrlInput,
    GenerateWorkspaceTokenInput,
    InviteWorkspaceMemberInput,
    JoinWorkspaceInput,
    LaunchAccessmodAnalysisInput,
    LaunchNotebookServerInput,
    LinkDatasetInput,
    LoginInput,
    LogPipelineMessageInput,
    PinDatasetInput,
    PipelineTokenInput,
    PrepareAccessmodFileDownloadInput,
    PrepareAccessmodFilesetVisualizationDownloadInput,
    PrepareAccessmodFileUploadInput,
    PrepareDownloadURLInput,
    PrepareObjectDownloadInput,
    PrepareObjectUploadInput,
    PrepareVersionFileDownloadInput,
    RegisterInput,
    RemoveFromFavoritesInput,
    RequestAccessmodAccessInput,
    ResendWorkspaceInvitationInput,
    ResetPasswordInput,
    RunDAGInput,
    RunPipelineInput,
    SetDAGRunFavoriteInput,
    SetMetadataAttributeInput,
    SetPasswordInput,
    StopPipelineInput,
    UpdateAccessmodAccessibilityAnalysisInput,
    UpdateAccessmodFilesetInput,
    UpdateAccessmodProjectInput,
    UpdateAccessmodProjectMemberInput,
    UpdateAccessmodZonalStatisticsInput,
    UpdateConnectionInput,
    UpdateDAGInput,
    UpdateDatasetInput,
    UpdateDatasetVersionInput,
    UpdateMembershipInput,
    UpdatePipelineInput,
    UpdatePipelineProgressInput,
    UpdatePipelineRecipientInput,
    UpdatePipelineVersionInput,
    UpdateTeamInput,
    UpdateTemplateInput,
    UpdateTemplateVersionInput,
    UpdateUserInput,
    UpdateWebappInput,
    UpdateWorkspaceInput,
    UpdateWorkspaceMemberInput,
    UpgradePipelineVersionFromTemplateInput,
    UploadPipelineInput,
    VerifyDeviceInput,
)
from .invite_workspace_member import InviteWorkspaceMember
from .join_workspace import JoinWorkspace
from .launch_accessmod_analysis import LaunchAccessmodAnalysis
from .launch_notebook_server import LaunchNotebookServer
from .link_dataset import LinkDataset
from .log_pipeline_message import LogPipelineMessage
from .login import Login
from .logout import Logout
from .me import Me
from .metadata_attributes import MetadataAttributes
from .notebooks_url import NotebooksUrl
from .organizations import Organizations
from .pending_workspace_invitations import PendingWorkspaceInvitations
from .pin_dataset import PinDataset
from .pipeline import Pipeline
from .pipeline_by_code import PipelineByCode
from .pipeline_run import PipelineRun
from .pipeline_templates import PipelineTemplates
from .pipeline_token import PipelineToken
from .pipeline_version import PipelineVersion
from .pipelines import Pipelines
from .prepare_accessmod_file_download import PrepareAccessmodFileDownload
from .prepare_accessmod_file_upload import PrepareAccessmodFileUpload
from .prepare_accessmod_fileset_visualization_download import (
    PrepareAccessmodFilesetVisualizationDownload,
)
from .prepare_download_url import PrepareDownloadURL
from .prepare_object_download import PrepareObjectDownload
from .prepare_object_upload import PrepareObjectUpload
from .prepare_version_file_download import PrepareVersionFileDownload
from .register import Register
from .remove_from_favorites import RemoveFromFavorites
from .request_accessmod_access import RequestAccessmodAccess
from .resend_workspace_invitation import ResendWorkspaceInvitation
from .reset_password import ResetPassword
from .run_dag import RunDAG
from .run_pipeline import RunPipeline
from .search_database_tables import SearchDatabaseTables
from .search_datasets import SearchDatasets
from .search_files import SearchFiles
from .search_pipeline_templates import SearchPipelineTemplates
from .search_pipelines import SearchPipelines
from .set_dag_run_favorite import SetDAGRunFavorite
from .set_metadata_attribute import SetMetadataAttribute
from .set_password import SetPassword
from .stop_pipeline import StopPipeline
from .team import Team
from .teams import Teams
from .template_by_code import TemplateByCode
from .update_accessmod_accessibility_analysis import (
    UpdateAccessmodAccessibilityAnalysis,
)
from .update_accessmod_fileset import UpdateAccessmodFileset
from .update_accessmod_project import UpdateAccessmodProject
from .update_accessmod_project_member import UpdateAccessmodProjectMember
from .update_accessmod_zonal_statistics import UpdateAccessmodZonalStatistics
from .update_connection import UpdateConnection
from .update_dag import UpdateDAG
from .update_dataset import UpdateDataset
from .update_dataset_version import UpdateDatasetVersion
from .update_membership import UpdateMembership
from .update_pipeline import UpdatePipeline
from .update_pipeline_progress import UpdatePipelineProgress
from .update_pipeline_recipient import UpdatePipelineRecipient
from .update_pipeline_template import UpdatePipelineTemplate
from .update_pipeline_version import UpdatePipelineVersion
from .update_team import UpdateTeam
from .update_template_version import UpdateTemplateVersion
from .update_user import UpdateUser
from .update_webapp import UpdateWebapp
from .update_workspace import UpdateWorkspace
from .update_workspace_member import UpdateWorkspaceMember
from .upgrade_pipeline_version_from_template import UpgradePipelineVersionFromTemplate
from .upload_pipeline import UploadPipeline
from .verify_device import VerifyDevice
from .webapp import Webapp
from .webapps import Webapps
from .workspace import Workspace
from .workspaces import Workspaces


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def add_pipeline_output(
        self, input: AddPipelineOutputInput, **kwargs: Any
    ) -> AddPipelineOutput:
        query = gql(
            """
            mutation addPipelineOutput($input: AddPipelineOutputInput!) {
              addPipelineOutput(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="addPipelineOutput",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddPipelineOutput.model_validate(data)

    def add_pipeline_recipient(
        self, input: CreatePipelineRecipientInput, **kwargs: Any
    ) -> AddPipelineRecipient:
        query = gql(
            """
            mutation addPipelineRecipient($input: CreatePipelineRecipientInput!) {
              addPipelineRecipient(input: $input) {
                errors
                recipient {
                  id
                  notificationLevel
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="addPipelineRecipient",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddPipelineRecipient.model_validate(data)

    def add_to_favorites(
        self, input: AddToFavoritesInput, **kwargs: Any
    ) -> AddToFavorites:
        query = gql(
            """
            mutation addToFavorites($input: AddToFavoritesInput!) {
              addToFavorites(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="addToFavorites", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddToFavorites.model_validate(data)

    def approve_accessmod_access_request(
        self, input: ApproveAccessmodAccessRequestInput, **kwargs: Any
    ) -> ApproveAccessmodAccessRequest:
        query = gql(
            """
            mutation approveAccessmodAccessRequest($input: ApproveAccessmodAccessRequestInput!) {
              approveAccessmodAccessRequest(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="approveAccessmodAccessRequest",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ApproveAccessmodAccessRequest.model_validate(data)

    def archive_workspace(
        self, input: ArchiveWorkspaceInput, **kwargs: Any
    ) -> ArchiveWorkspace:
        query = gql(
            """
            mutation archiveWorkspace($input: ArchiveWorkspaceInput!) {
              archiveWorkspace(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="archiveWorkspace",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ArchiveWorkspace.model_validate(data)

    def create_accessmod_accessibility_analysis(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        input: Union[
            Optional[CreateAccessmodAccessibilityAnalysisInput], UnsetType
        ] = UNSET,
        **kwargs: Any
    ) -> CreateAccessmodAccessibilityAnalysis:
        query = gql(
            """
            mutation createAccessmodAccessibilityAnalysis($page: Int, $perPage: Int, $input: CreateAccessmodAccessibilityAnalysisInput) {
              createAccessmodAccessibilityAnalysis(input: $input) {
                analysis {
                  algorithm
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  barrier {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  createdAt
                  dem {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  frictionSurface {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  healthFacilities {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  id
                  invertDirection
                  knightMove
                  landCover {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  maxTravelTime
                  movingSpeeds
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    delete
                    run
                    update
                  }
                  stack {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  stackPriorities
                  status
                  transportNetwork {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  travelTimes {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  type
                  updatedAt
                  water {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  waterAllTouched
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="createAccessmodAccessibilityAnalysis",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAccessmodAccessibilityAnalysis.model_validate(data)

    def create_accessmod_file(
        self, input: CreateAccessmodFileInput, **kwargs: Any
    ) -> CreateAccessmodFile:
        query = gql(
            """
            mutation createAccessmodFile($input: CreateAccessmodFileInput!) {
              createAccessmodFile(input: $input) {
                errors
                file {
                  createdAt
                  fileset {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  id
                  mimeType
                  name
                  updatedAt
                  uri
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="createAccessmodFile",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAccessmodFile.model_validate(data)

    def create_accessmod_fileset(
        self,
        input: CreateAccessmodFilesetInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateAccessmodFileset:
        query = gql(
            """
            mutation createAccessmodFileset($page: Int, $perPage: Int, $input: CreateAccessmodFilesetInput!) {
              createAccessmodFileset(input: $input) {
                errors
                fileset {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  createdAt
                  files {
                    createdAt
                    id
                    mimeType
                    name
                    updatedAt
                    uri
                  }
                  id
                  metadata
                  mode
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    createFile
                    delete
                    update
                  }
                  role {
                    code
                    createdAt
                    format
                    id
                    name
                    updatedAt
                  }
                  status
                  updatedAt
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="createAccessmodFileset",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAccessmodFileset.model_validate(data)

    def create_accessmod_project(
        self,
        input: CreateAccessmodProjectInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateAccessmodProject:
        query = gql(
            """
            mutation createAccessmodProject($page: Int, $perPage: Int, $input: CreateAccessmodProjectInput!) {
              createAccessmodProject(input: $input) {
                errors
                project {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  country {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  crs
                  dem {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  description
                  extent
                  id
                  members {
                    createdAt
                    id
                    mode
                    updatedAt
                  }
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    createAnalysis
                    createFileset
                    createMember
                    createPermission
                    delete
                    update
                  }
                  spatialResolution
                  updatedAt
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="createAccessmodProject",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAccessmodProject.model_validate(data)

    def create_accessmod_project_member(
        self, input: CreateAccessmodProjectMemberInput, **kwargs: Any
    ) -> CreateAccessmodProjectMember:
        query = gql(
            """
            mutation createAccessmodProjectMember($input: CreateAccessmodProjectMemberInput!) {
              createAccessmodProjectMember(input: $input) {
                errors
                member {
                  createdAt
                  id
                  mode
                  permissions {
                    delete
                    update
                  }
                  project {
                    createdAt
                    crs
                    description
                    extent
                    id
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    spatialResolution
                    updatedAt
                  }
                  team {
                    createdAt
                    id
                    name
                    updatedAt
                  }
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="createAccessmodProjectMember",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAccessmodProjectMember.model_validate(data)

    def create_accessmod_zonal_statistics(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        input: Union[Optional[CreateAccessmodZonalStatisticsInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateAccessmodZonalStatistics:
        query = gql(
            """
            mutation createAccessmodZonalStatistics($page: Int, $perPage: Int, $input: CreateAccessmodZonalStatisticsInput) {
              createAccessmodZonalStatistics(input: $input) {
                analysis {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  boundaries {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  createdAt
                  id
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    delete
                    run
                    update
                  }
                  population {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  status
                  timeThresholds
                  travelTimes {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  type
                  updatedAt
                  zonalStatisticsGeo {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  zonalStatisticsTable {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="createAccessmodZonalStatistics",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAccessmodZonalStatistics.model_validate(data)

    def create_bucket_folder(
        self, input: CreateBucketFolderInput, **kwargs: Any
    ) -> CreateBucketFolder:
        query = gql(
            """
            mutation createBucketFolder($input: CreateBucketFolderInput!) {
              createBucketFolder(input: $input) {
                errors
                folder {
                  key
                  name
                  path
                  size
                  type
                  updatedAt
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="createBucketFolder",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateBucketFolder.model_validate(data)

    def create_connection(
        self, input: CreateConnectionInput, **kwargs: Any
    ) -> CreateConnection:
        query = gql(
            """
            mutation createConnection($input: CreateConnectionInput!) {
              createConnection(input: $input) {
                connection {
                  __typename
                  createdAt
                  description
                  fields {
                    code
                    createdAt
                    secret
                    updatedAt
                    value
                  }
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  slug
                  type
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="createConnection",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateConnection.model_validate(data)

    def create_dataset(
        self,
        id: str,
        input: CreateDatasetInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateDataset:
        query = gql(
            """
            mutation createDataset($page: Int, $perPage: Int, $id: ID!, $page1: Int, $perPage1: Int, $input: CreateDatasetInput!) {
              createDataset(input: $input) {
                dataset {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  id
                  latestVersion {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  links(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createVersion
                    delete
                    update
                  }
                  slug
                  targetId
                  updatedAt
                  version(id: $id) {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                errors
                link {
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  id
                  isPinned
                  permissions {
                    delete
                    pin
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "id": id,
            "page1": page_1,
            "perPage1": per_page_1,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="createDataset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateDataset.model_validate(data)

    def create_dataset_version(
        self,
        name: str,
        input: CreateDatasetVersionInput,
        attachment: Union[Optional[bool], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateDatasetVersion:
        query = gql(
            """
            mutation createDatasetVersion($attachment: Boolean, $name: String!, $page: Int, $perPage: Int, $input: CreateDatasetVersionInput!) {
              createDatasetVersion(input: $input) {
                errors
                success
                version {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  changelog
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  fileByName(name: $name) {
                    contentType
                    createdAt
                    downloadUrl(attachment: $attachment)
                    filename
                    id
                    properties
                    size
                    targetId
                    uri
                  }
                  files(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  id
                  name
                  permissions {
                    delete
                    download
                    update
                  }
                  targetId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "attachment": attachment,
            "name": name,
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="createDatasetVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDatasetVersion.model_validate(data)

    def create_dataset_version_file(
        self,
        input: CreateDatasetVersionFileInput,
        attachment: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateDatasetVersionFile:
        query = gql(
            """
            mutation createDatasetVersionFile($attachment: Boolean, $input: CreateDatasetVersionFileInput!) {
              createDatasetVersionFile(input: $input) {
                errors
                file {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  contentType
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  downloadUrl(attachment: $attachment)
                  fileSample {
                    sample
                    status
                    statusReason
                  }
                  filename
                  id
                  properties
                  size
                  targetId
                  uri
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"attachment": attachment, "input": input}
        response = self.execute(
            query=query,
            operation_name="createDatasetVersionFile",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDatasetVersionFile.model_validate(data)

    def create_membership(
        self, input: CreateMembershipInput, **kwargs: Any
    ) -> CreateMembership:
        query = gql(
            """
            mutation createMembership($input: CreateMembershipInput!) {
              createMembership(input: $input) {
                errors
                membership {
                  createdAt
                  id
                  permissions {
                    delete
                    update
                  }
                  role
                  team {
                    createdAt
                    id
                    name
                    updatedAt
                  }
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="createMembership",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateMembership.model_validate(data)

    def create_pipeline(
        self,
        input: CreatePipelineInput,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreatePipeline:
        query = gql(
            """
            mutation createPipeline($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $input: CreatePipelineInput!) {
              createPipeline(input: $input) {
                errors
                pipeline {
                  code
                  config
                  createdAt
                  currentVersion {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  description
                  hasNewTemplateVersions
                  id
                  name
                  newTemplateVersions {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  notebookPath
                  permissions {
                    createVersion
                    delete
                    run
                    schedule
                    stopPipeline
                    update
                  }
                  recipients {
                    id
                    notificationLevel
                  }
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  sourceTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  type
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  webhookEnabled
                  webhookUrl
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="createPipeline", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreatePipeline.model_validate(data)

    def create_pipeline_from_template_version(
        self,
        input: CreatePipelineFromTemplateVersionInput,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreatePipelineFromTemplateVersion:
        query = gql(
            """
            mutation createPipelineFromTemplateVersion($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $input: CreatePipelineFromTemplateVersionInput!) {
              createPipelineFromTemplateVersion(input: $input) {
                errors
                pipeline {
                  code
                  config
                  createdAt
                  currentVersion {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  description
                  hasNewTemplateVersions
                  id
                  name
                  newTemplateVersions {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  notebookPath
                  permissions {
                    createVersion
                    delete
                    run
                    schedule
                    stopPipeline
                    update
                  }
                  recipients {
                    id
                    notificationLevel
                  }
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  sourceTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  type
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  webhookEnabled
                  webhookUrl
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="createPipelineFromTemplateVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreatePipelineFromTemplateVersion.model_validate(data)

    def create_pipeline_template_version(
        self,
        input: CreatePipelineTemplateVersionInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreatePipelineTemplateVersion:
        query = gql(
            """
            mutation createPipelineTemplateVersion($page: Int, $perPage: Int, $input: CreatePipelineTemplateVersionInput!) {
              createPipelineTemplateVersion(input: $input) {
                errors
                pipelineTemplate {
                  code
                  config
                  currentVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  description
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  sourcePipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  updatedAt
                  versions(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="createPipelineTemplateVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreatePipelineTemplateVersion.model_validate(data)

    def create_team(
        self,
        input: CreateTeamInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateTeam:
        query = gql(
            """
            mutation createTeam($page: Int, $perPage: Int, $input: CreateTeamInput!) {
              createTeam(input: $input) {
                errors
                success
                team {
                  createdAt
                  id
                  memberships(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createMembership
                    delete
                    update
                  }
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="createTeam", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateTeam.model_validate(data)

    def create_webapp(self, input: CreateWebappInput, **kwargs: Any) -> CreateWebapp:
        query = gql(
            """
            mutation createWebapp($input: CreateWebappInput!) {
              createWebapp(input: $input) {
                errors
                success
                webapp {
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  icon
                  id
                  isFavorite
                  name
                  permissions {
                    delete
                    update
                  }
                  url
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="createWebapp", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateWebapp.model_validate(data)

    def create_workspace(
        self,
        input: CreateWorkspaceInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateWorkspace:
        _query = gql(
            """
            mutation createWorkspace($page: Int, $perPage: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $input: CreateWorkspaceInput!) {
              createWorkspace(input: $input) {
                errors
                success
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page, perPage: $perPage, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "input": input,
        }
        response = self.execute(
            query=_query,
            operation_name="createWorkspace",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateWorkspace.model_validate(data)

    def decline_workspace_invitation(
        self, input: DeclineWorkspaceInvitationInput, **kwargs: Any
    ) -> DeclineWorkspaceInvitation:
        query = gql(
            """
            mutation declineWorkspaceInvitation($input: DeclineWorkspaceInvitationInput!) {
              declineWorkspaceInvitation(input: $input) {
                errors
                invitation {
                  createdAt
                  email
                  id
                  invitedBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  role
                  status
                  updatedAt
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="declineWorkspaceInvitation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeclineWorkspaceInvitation.model_validate(data)

    def delete_accessmod_analysis(
        self,
        input: Union[Optional[DeleteAccessmodAnalysisInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DeleteAccessmodAnalysis:
        query = gql(
            """
            mutation deleteAccessmodAnalysis($input: DeleteAccessmodAnalysisInput) {
              deleteAccessmodAnalysis(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteAccessmodAnalysis",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteAccessmodAnalysis.model_validate(data)

    def delete_accessmod_fileset(
        self, input: DeleteAccessmodFilesetInput, **kwargs: Any
    ) -> DeleteAccessmodFileset:
        query = gql(
            """
            mutation deleteAccessmodFileset($input: DeleteAccessmodFilesetInput!) {
              deleteAccessmodFileset(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteAccessmodFileset",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteAccessmodFileset.model_validate(data)

    def delete_accessmod_project(
        self, input: DeleteAccessmodProjectInput, **kwargs: Any
    ) -> DeleteAccessmodProject:
        query = gql(
            """
            mutation deleteAccessmodProject($input: DeleteAccessmodProjectInput!) {
              deleteAccessmodProject(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteAccessmodProject",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteAccessmodProject.model_validate(data)

    def delete_accessmod_project_member(
        self, input: DeleteAccessmodProjectMemberInput, **kwargs: Any
    ) -> DeleteAccessmodProjectMember:
        query = gql(
            """
            mutation deleteAccessmodProjectMember($input: DeleteAccessmodProjectMemberInput!) {
              deleteAccessmodProjectMember(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteAccessmodProjectMember",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteAccessmodProjectMember.model_validate(data)

    def delete_bucket_object(
        self, input: DeleteBucketObjectInput, **kwargs: Any
    ) -> DeleteBucketObject:
        query = gql(
            """
            mutation deleteBucketObject($input: DeleteBucketObjectInput!) {
              deleteBucketObject(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteBucketObject",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteBucketObject.model_validate(data)

    def delete_connection(
        self, input: DeleteConnectionInput, **kwargs: Any
    ) -> DeleteConnection:
        query = gql(
            """
            mutation deleteConnection($input: DeleteConnectionInput!) {
              deleteConnection(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteConnection",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteConnection.model_validate(data)

    def delete_dataset(self, input: DeleteDatasetInput, **kwargs: Any) -> DeleteDataset:
        query = gql(
            """
            mutation deleteDataset($input: DeleteDatasetInput!) {
              deleteDataset(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="deleteDataset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteDataset.model_validate(data)

    def delete_dataset_link(
        self, input: DeleteDatasetLinkInput, **kwargs: Any
    ) -> DeleteDatasetLink:
        query = gql(
            """
            mutation deleteDatasetLink($input: DeleteDatasetLinkInput!) {
              deleteDatasetLink(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteDatasetLink",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteDatasetLink.model_validate(data)

    def delete_dataset_version(
        self, input: DeleteDatasetVersionInput, **kwargs: Any
    ) -> DeleteDatasetVersion:
        query = gql(
            """
            mutation deleteDatasetVersion($input: DeleteDatasetVersionInput!) {
              deleteDatasetVersion(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteDatasetVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteDatasetVersion.model_validate(data)

    def delete_membership(
        self, input: DeleteMembershipInput, **kwargs: Any
    ) -> DeleteMembership:
        query = gql(
            """
            mutation deleteMembership($input: DeleteMembershipInput!) {
              deleteMembership(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteMembership",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteMembership.model_validate(data)

    def delete_metadata_attribute(
        self, input: DeleteMetadataAttributeInput, **kwargs: Any
    ) -> DeleteMetadataAttribute:
        query = gql(
            """
            mutation deleteMetadataAttribute($input: DeleteMetadataAttributeInput!) {
              deleteMetadataAttribute(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteMetadataAttribute",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteMetadataAttribute.model_validate(data)

    def delete_pipeline(
        self,
        input: Union[Optional[DeletePipelineInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DeletePipeline:
        query = gql(
            """
            mutation deletePipeline($input: DeletePipelineInput) {
              deletePipeline(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="deletePipeline", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeletePipeline.model_validate(data)

    def delete_pipeline_recipient(
        self, input: DeletePipelineRecipientInput, **kwargs: Any
    ) -> DeletePipelineRecipient:
        query = gql(
            """
            mutation deletePipelineRecipient($input: DeletePipelineRecipientInput!) {
              deletePipelineRecipient(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deletePipelineRecipient",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeletePipelineRecipient.model_validate(data)

    def delete_pipeline_template(
        self,
        input: Union[Optional[DeletePipelineTemplateInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DeletePipelineTemplate:
        query = gql(
            """
            mutation deletePipelineTemplate($input: DeletePipelineTemplateInput) {
              deletePipelineTemplate(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deletePipelineTemplate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeletePipelineTemplate.model_validate(data)

    def delete_pipeline_version(
        self, input: DeletePipelineVersionInput, **kwargs: Any
    ) -> DeletePipelineVersion:
        query = gql(
            """
            mutation deletePipelineVersion($input: DeletePipelineVersionInput!) {
              deletePipelineVersion(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deletePipelineVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeletePipelineVersion.model_validate(data)

    def delete_team(self, input: DeleteTeamInput, **kwargs: Any) -> DeleteTeam:
        query = gql(
            """
            mutation deleteTeam($input: DeleteTeamInput!) {
              deleteTeam(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="deleteTeam", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteTeam.model_validate(data)

    def delete_template_version(
        self, input: DeleteTemplateVersionInput, **kwargs: Any
    ) -> DeleteTemplateVersion:
        query = gql(
            """
            mutation deleteTemplateVersion($input: DeleteTemplateVersionInput!) {
              deleteTemplateVersion(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteTemplateVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteTemplateVersion.model_validate(data)

    def delete_webapp(self, input: DeleteWebappInput, **kwargs: Any) -> DeleteWebapp:
        query = gql(
            """
            mutation deleteWebapp($input: DeleteWebappInput!) {
              deleteWebapp(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="deleteWebapp", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteWebapp.model_validate(data)

    def delete_workspace(
        self, input: DeleteWorkspaceInput, **kwargs: Any
    ) -> DeleteWorkspace:
        query = gql(
            """
            mutation deleteWorkspace($input: DeleteWorkspaceInput!) {
              deleteWorkspace(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="deleteWorkspace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteWorkspace.model_validate(data)

    def delete_workspace_database_table(
        self, input: DeleteWorkspaceDatabaseTableInput, **kwargs: Any
    ) -> DeleteWorkspaceDatabaseTable:
        query = gql(
            """
            mutation deleteWorkspaceDatabaseTable($input: DeleteWorkspaceDatabaseTableInput!) {
              deleteWorkspaceDatabaseTable(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteWorkspaceDatabaseTable",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteWorkspaceDatabaseTable.model_validate(data)

    def delete_workspace_invitation(
        self, input: DeleteWorkspaceInvitationInput, **kwargs: Any
    ) -> DeleteWorkspaceInvitation:
        query = gql(
            """
            mutation deleteWorkspaceInvitation($input: DeleteWorkspaceInvitationInput!) {
              deleteWorkspaceInvitation(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteWorkspaceInvitation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteWorkspaceInvitation.model_validate(data)

    def delete_workspace_member(
        self, input: DeleteWorkspaceMemberInput, **kwargs: Any
    ) -> DeleteWorkspaceMember:
        query = gql(
            """
            mutation deleteWorkspaceMember($input: DeleteWorkspaceMemberInput!) {
              deleteWorkspaceMember(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="deleteWorkspaceMember",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteWorkspaceMember.model_validate(data)

    def deny_accessmod_access_request(
        self, input: DenyAccessmodAccessRequestInput, **kwargs: Any
    ) -> DenyAccessmodAccessRequest:
        query = gql(
            """
            mutation denyAccessmodAccessRequest($input: DenyAccessmodAccessRequestInput!) {
              denyAccessmodAccessRequest(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="denyAccessmodAccessRequest",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DenyAccessmodAccessRequest.model_validate(data)

    def disable_two_factor(
        self,
        input: Union[Optional[DisableTwoFactorInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DisableTwoFactor:
        query = gql(
            """
            mutation disableTwoFactor($input: DisableTwoFactorInput) {
              disableTwoFactor(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="disableTwoFactor",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DisableTwoFactor.model_validate(data)

    def enable_two_factor(
        self,
        input: Union[Optional[EnableTwoFactorInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> EnableTwoFactor:
        query = gql(
            """
            mutation enableTwoFactor($input: EnableTwoFactorInput) {
              enableTwoFactor(input: $input) {
                errors
                success
                verified
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="enableTwoFactor", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return EnableTwoFactor.model_validate(data)

    def generate_challenge(self, **kwargs: Any) -> GenerateChallenge:
        query = gql(
            """
            mutation generateChallenge {
              generateChallenge {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query,
            operation_name="generateChallenge",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GenerateChallenge.model_validate(data)

    def generate_dataset_upload_url(
        self, input: GenerateDatasetUploadUrlInput, **kwargs: Any
    ) -> GenerateDatasetUploadUrl:
        query = gql(
            """
            mutation generateDatasetUploadUrl($input: GenerateDatasetUploadUrlInput!) {
              generateDatasetUploadUrl(input: $input) {
                errors
                success
                uploadUrl
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="generateDatasetUploadUrl",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GenerateDatasetUploadUrl.model_validate(data)

    def generate_new_database_password(
        self,
        input: GenerateNewDatabasePasswordInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GenerateNewDatabasePassword:
        _query = gql(
            """
            mutation generateNewDatabasePassword($page: Int, $perPage: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $input: GenerateNewDatabasePasswordInput!) {
              generateNewDatabasePassword(input: $input) {
                errors
                success
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page, perPage: $perPage, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "input": input,
        }
        response = self.execute(
            query=_query,
            operation_name="generateNewDatabasePassword",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GenerateNewDatabasePassword.model_validate(data)

    def generate_pipeline_webhook_url(
        self,
        input: GeneratePipelineWebhookUrlInput,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GeneratePipelineWebhookUrl:
        query = gql(
            """
            mutation generatePipelineWebhookUrl($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $input: GeneratePipelineWebhookUrlInput!) {
              generatePipelineWebhookUrl(input: $input) {
                errors
                pipeline {
                  code
                  config
                  createdAt
                  currentVersion {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  description
                  hasNewTemplateVersions
                  id
                  name
                  newTemplateVersions {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  notebookPath
                  permissions {
                    createVersion
                    delete
                    run
                    schedule
                    stopPipeline
                    update
                  }
                  recipients {
                    id
                    notificationLevel
                  }
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  sourceTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  type
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  webhookEnabled
                  webhookUrl
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="generatePipelineWebhookUrl",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GeneratePipelineWebhookUrl.model_validate(data)

    def generate_workspace_token(
        self, input: GenerateWorkspaceTokenInput, **kwargs: Any
    ) -> GenerateWorkspaceToken:
        query = gql(
            """
            mutation generateWorkspaceToken($input: GenerateWorkspaceTokenInput!) {
              generateWorkspaceToken(input: $input) {
                errors
                success
                token
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="generateWorkspaceToken",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GenerateWorkspaceToken.model_validate(data)

    def invite_workspace_member(
        self, input: InviteWorkspaceMemberInput, **kwargs: Any
    ) -> InviteWorkspaceMember:
        query = gql(
            """
            mutation inviteWorkspaceMember($input: InviteWorkspaceMemberInput!) {
              inviteWorkspaceMember(input: $input) {
                errors
                success
                workspaceMembership {
                  createdAt
                  id
                  role
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="inviteWorkspaceMember",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InviteWorkspaceMember.model_validate(data)

    def join_workspace(
        self,
        input: JoinWorkspaceInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> JoinWorkspace:
        _query = gql(
            """
            mutation joinWorkspace($page: Int, $perPage: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $input: JoinWorkspaceInput!) {
              joinWorkspace(input: $input) {
                errors
                invitation {
                  createdAt
                  email
                  id
                  invitedBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  role
                  status
                  updatedAt
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page, perPage: $perPage, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "input": input,
        }
        response = self.execute(
            query=_query, operation_name="joinWorkspace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return JoinWorkspace.model_validate(data)

    def launch_accessmod_analysis(
        self,
        input: Union[Optional[LaunchAccessmodAnalysisInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> LaunchAccessmodAnalysis:
        query = gql(
            """
            mutation launchAccessmodAnalysis($input: LaunchAccessmodAnalysisInput) {
              launchAccessmodAnalysis(input: $input) {
                analysis {
                  __typename
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  createdAt
                  id
                  name
                  permissions {
                    delete
                    run
                    update
                  }
                  status
                  type
                  updatedAt
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="launchAccessmodAnalysis",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return LaunchAccessmodAnalysis.model_validate(data)

    def launch_notebook_server(
        self, input: LaunchNotebookServerInput, **kwargs: Any
    ) -> LaunchNotebookServer:
        query = gql(
            """
            mutation launchNotebookServer($input: LaunchNotebookServerInput!) {
              launchNotebookServer(input: $input) {
                errors
                server {
                  name
                  ready
                  url
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="launchNotebookServer",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return LaunchNotebookServer.model_validate(data)

    def link_dataset(self, input: LinkDatasetInput, **kwargs: Any) -> LinkDataset:
        query = gql(
            """
            mutation linkDataset($input: LinkDatasetInput!) {
              linkDataset(input: $input) {
                errors
                link {
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  id
                  isPinned
                  permissions {
                    delete
                    pin
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="linkDataset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return LinkDataset.model_validate(data)

    def log_pipeline_message(
        self, input: LogPipelineMessageInput, **kwargs: Any
    ) -> LogPipelineMessage:
        query = gql(
            """
            mutation logPipelineMessage($input: LogPipelineMessageInput!) {
              logPipelineMessage(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="logPipelineMessage",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return LogPipelineMessage.model_validate(data)

    def login(self, input: LoginInput, **kwargs: Any) -> Login:
        query = gql(
            """
            mutation login($input: LoginInput!) {
              login(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="login", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Login.model_validate(data)

    def logout(self, **kwargs: Any) -> Logout:
        query = gql(
            """
            mutation logout {
              logout {
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="logout", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Logout.model_validate(data)

    def pin_dataset(self, input: PinDatasetInput, **kwargs: Any) -> PinDataset:
        query = gql(
            """
            mutation pinDataset($input: PinDatasetInput!) {
              pinDataset(input: $input) {
                errors
                link {
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  id
                  isPinned
                  permissions {
                    delete
                    pin
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="pinDataset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PinDataset.model_validate(data)

    def pipeline_token(self, input: PipelineTokenInput, **kwargs: Any) -> PipelineToken:
        query = gql(
            """
            mutation pipelineToken($input: PipelineTokenInput!) {
              pipelineToken(input: $input) {
                errors
                success
                token
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="pipelineToken", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PipelineToken.model_validate(data)

    def prepare_accessmod_file_download(
        self, input: PrepareAccessmodFileDownloadInput, **kwargs: Any
    ) -> PrepareAccessmodFileDownload:
        query = gql(
            """
            mutation prepareAccessmodFileDownload($input: PrepareAccessmodFileDownloadInput!) {
              prepareAccessmodFileDownload(input: $input) {
                downloadUrl
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="prepareAccessmodFileDownload",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PrepareAccessmodFileDownload.model_validate(data)

    def prepare_accessmod_file_upload(
        self, input: PrepareAccessmodFileUploadInput, **kwargs: Any
    ) -> PrepareAccessmodFileUpload:
        query = gql(
            """
            mutation prepareAccessmodFileUpload($input: PrepareAccessmodFileUploadInput!) {
              prepareAccessmodFileUpload(input: $input) {
                fileUri
                success
                uploadUrl
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="prepareAccessmodFileUpload",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PrepareAccessmodFileUpload.model_validate(data)

    def prepare_accessmod_fileset_visualization_download(
        self, input: PrepareAccessmodFilesetVisualizationDownloadInput, **kwargs: Any
    ) -> PrepareAccessmodFilesetVisualizationDownload:
        query = gql(
            """
            mutation prepareAccessmodFilesetVisualizationDownload($input: PrepareAccessmodFilesetVisualizationDownloadInput!) {
              prepareAccessmodFilesetVisualizationDownload(input: $input) {
                success
                url
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="prepareAccessmodFilesetVisualizationDownload",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PrepareAccessmodFilesetVisualizationDownload.model_validate(data)

    def prepare_download_url(
        self, input: PrepareDownloadURLInput, **kwargs: Any
    ) -> PrepareDownloadURL:
        query = gql(
            """
            mutation prepareDownloadURL($input: PrepareDownloadURLInput!) {
              prepareDownloadURL(input: $input) {
                success
                url
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="prepareDownloadURL",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PrepareDownloadURL.model_validate(data)

    def prepare_object_download(
        self, input: PrepareObjectDownloadInput, **kwargs: Any
    ) -> PrepareObjectDownload:
        query = gql(
            """
            mutation prepareObjectDownload($input: PrepareObjectDownloadInput!) {
              prepareObjectDownload(input: $input) {
                downloadUrl
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="prepareObjectDownload",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PrepareObjectDownload.model_validate(data)

    def prepare_object_upload(
        self, input: PrepareObjectUploadInput, **kwargs: Any
    ) -> PrepareObjectUpload:
        query = gql(
            """
            mutation prepareObjectUpload($input: PrepareObjectUploadInput!) {
              prepareObjectUpload(input: $input) {
                errors
                success
                uploadUrl
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="prepareObjectUpload",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PrepareObjectUpload.model_validate(data)

    def prepare_version_file_download(
        self, input: PrepareVersionFileDownloadInput, **kwargs: Any
    ) -> PrepareVersionFileDownload:
        query = gql(
            """
            mutation prepareVersionFileDownload($input: PrepareVersionFileDownloadInput!) {
              prepareVersionFileDownload(input: $input) {
                downloadUrl
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="prepareVersionFileDownload",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PrepareVersionFileDownload.model_validate(data)

    def register(self, input: RegisterInput, **kwargs: Any) -> Register:
        query = gql(
            """
            mutation register($input: RegisterInput!) {
              register(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="register", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Register.model_validate(data)

    def remove_from_favorites(
        self, input: RemoveFromFavoritesInput, **kwargs: Any
    ) -> RemoveFromFavorites:
        query = gql(
            """
            mutation removeFromFavorites($input: RemoveFromFavoritesInput!) {
              removeFromFavorites(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="removeFromFavorites",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveFromFavorites.model_validate(data)

    def request_accessmod_access(
        self, input: RequestAccessmodAccessInput, **kwargs: Any
    ) -> RequestAccessmodAccess:
        query = gql(
            """
            mutation requestAccessmodAccess($input: RequestAccessmodAccessInput!) {
              requestAccessmodAccess(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="requestAccessmodAccess",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RequestAccessmodAccess.model_validate(data)

    def resend_workspace_invitation(
        self, input: ResendWorkspaceInvitationInput, **kwargs: Any
    ) -> ResendWorkspaceInvitation:
        query = gql(
            """
            mutation resendWorkspaceInvitation($input: ResendWorkspaceInvitationInput!) {
              resendWorkspaceInvitation(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="resendWorkspaceInvitation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ResendWorkspaceInvitation.model_validate(data)

    def reset_password(self, input: ResetPasswordInput, **kwargs: Any) -> ResetPassword:
        query = gql(
            """
            mutation resetPassword($input: ResetPasswordInput!) {
              resetPassword(input: $input) {
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="resetPassword", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ResetPassword.model_validate(data)

    def run_dag(
        self,
        input: RunDAGInput,
        order_by: Union[Optional[DAGRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> RunDAG:
        query = gql(
            """
            mutation runDAG($orderBy: DAGRunOrderBy, $page: Int, $perPage: Int, $input: RunDAGInput!) {
              runDAG(input: $input) {
                dag {
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  description
                  externalId
                  externalUrl
                  formCode
                  id
                  label
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  tags {
                    id
                    name
                  }
                  template {
                    code
                    description
                    sampleConfig
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                dagRun {
                  config
                  duration
                  executionDate
                  externalId
                  externalUrl
                  id
                  isFavorite
                  label
                  lastRefreshedAt
                  logs
                  messages {
                    message
                    priority
                    timestamp
                  }
                  outputs {
                    title
                    uri
                  }
                  progress
                  status
                  triggerMode
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="runDAG", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return RunDAG.model_validate(data)

    def run_pipeline(
        self,
        direction: OrderByDirection,
        order_by: str,
        page: int,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        input: Union[Optional[RunPipelineInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> RunPipeline:
        query = gql(
            """
            mutation runPipeline($direction: OrderByDirection!, $orderBy: String!, $page: Int!, $perPage: Int, $input: RunPipelineInput) {
              runPipeline(input: $input) {
                errors
                run {
                  code
                  config
                  datasetVersions {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  duration
                  enableDebugLogs
                  executionDate
                  id
                  logs
                  messages {
                    message
                    priority
                    timestamp
                  }
                  outputs {
                    __typename
                    ... on BucketObject {
                      key
                      name
                      path
                      size
                      type
                      updatedAt
                    }
                    ... on DatabaseTable {
                      columns {
                        name
                        type
                      }
                      count
                      name
                      rows(direction: $direction, orderBy: $orderBy, page: $page, perPage: $perPage) {
                        hasNextPage
                        hasPreviousPage
                        items
                        pageNumber
                      }
                      sample
                    }
                    ... on GenericOutput {
                      genericName
                      genericType
                      genericUri
                    }
                  }
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  progress
                  run_id
                  sendMailNotifications
                  status
                  stoppedBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  timeout
                  triggerMode
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  version {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "direction": direction,
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="runPipeline", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return RunPipeline.model_validate(data)

    def set_dag_run_favorite(
        self, input: SetDAGRunFavoriteInput, **kwargs: Any
    ) -> SetDAGRunFavorite:
        query = gql(
            """
            mutation setDAGRunFavorite($input: SetDAGRunFavoriteInput!) {
              setDAGRunFavorite(input: $input) {
                dagRun {
                  config
                  duration
                  executionDate
                  externalId
                  externalUrl
                  id
                  isFavorite
                  label
                  lastRefreshedAt
                  logs
                  messages {
                    message
                    priority
                    timestamp
                  }
                  outputs {
                    title
                    uri
                  }
                  progress
                  status
                  triggerMode
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="setDAGRunFavorite",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SetDAGRunFavorite.model_validate(data)

    def set_metadata_attribute(
        self, input: SetMetadataAttributeInput, **kwargs: Any
    ) -> SetMetadataAttribute:
        query = gql(
            """
            mutation setMetadataAttribute($input: SetMetadataAttributeInput!) {
              setMetadataAttribute(input: $input) {
                attribute {
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  id
                  key
                  label
                  system
                  updatedAt
                  updatedBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  value
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="setMetadataAttribute",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SetMetadataAttribute.model_validate(data)

    def set_password(self, input: SetPasswordInput, **kwargs: Any) -> SetPassword:
        query = gql(
            """
            mutation setPassword($input: SetPasswordInput!) {
              setPassword(input: $input) {
                error
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="setPassword", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SetPassword.model_validate(data)

    def stop_pipeline(self, input: StopPipelineInput, **kwargs: Any) -> StopPipeline:
        query = gql(
            """
            mutation stopPipeline($input: StopPipelineInput!) {
              stopPipeline(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="stopPipeline", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return StopPipeline.model_validate(data)

    def update_accessmod_accessibility_analysis(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        input: Union[
            Optional[UpdateAccessmodAccessibilityAnalysisInput], UnsetType
        ] = UNSET,
        **kwargs: Any
    ) -> UpdateAccessmodAccessibilityAnalysis:
        query = gql(
            """
            mutation updateAccessmodAccessibilityAnalysis($page: Int, $perPage: Int, $input: UpdateAccessmodAccessibilityAnalysisInput) {
              updateAccessmodAccessibilityAnalysis(input: $input) {
                analysis {
                  algorithm
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  barrier {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  createdAt
                  dem {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  frictionSurface {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  healthFacilities {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  id
                  invertDirection
                  knightMove
                  landCover {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  maxTravelTime
                  movingSpeeds
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    delete
                    run
                    update
                  }
                  stack {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  stackPriorities
                  status
                  transportNetwork {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  travelTimes {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  type
                  updatedAt
                  water {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  waterAllTouched
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="updateAccessmodAccessibilityAnalysis",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAccessmodAccessibilityAnalysis.model_validate(data)

    def update_accessmod_fileset(
        self,
        input: UpdateAccessmodFilesetInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateAccessmodFileset:
        query = gql(
            """
            mutation updateAccessmodFileset($page: Int, $perPage: Int, $input: UpdateAccessmodFilesetInput!) {
              updateAccessmodFileset(input: $input) {
                errors
                fileset {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  createdAt
                  files {
                    createdAt
                    id
                    mimeType
                    name
                    updatedAt
                    uri
                  }
                  id
                  metadata
                  mode
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    createFile
                    delete
                    update
                  }
                  role {
                    code
                    createdAt
                    format
                    id
                    name
                    updatedAt
                  }
                  status
                  updatedAt
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="updateAccessmodFileset",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAccessmodFileset.model_validate(data)

    def update_accessmod_project(
        self,
        input: UpdateAccessmodProjectInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateAccessmodProject:
        query = gql(
            """
            mutation updateAccessmodProject($page: Int, $perPage: Int, $input: UpdateAccessmodProjectInput!) {
              updateAccessmodProject(input: $input) {
                errors
                project {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  country {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  crs
                  dem {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  description
                  extent
                  id
                  members {
                    createdAt
                    id
                    mode
                    updatedAt
                  }
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    createAnalysis
                    createFileset
                    createMember
                    createPermission
                    delete
                    update
                  }
                  spatialResolution
                  updatedAt
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="updateAccessmodProject",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAccessmodProject.model_validate(data)

    def update_accessmod_project_member(
        self, input: UpdateAccessmodProjectMemberInput, **kwargs: Any
    ) -> UpdateAccessmodProjectMember:
        query = gql(
            """
            mutation updateAccessmodProjectMember($input: UpdateAccessmodProjectMemberInput!) {
              updateAccessmodProjectMember(input: $input) {
                errors
                member {
                  createdAt
                  id
                  mode
                  permissions {
                    delete
                    update
                  }
                  project {
                    createdAt
                    crs
                    description
                    extent
                    id
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    spatialResolution
                    updatedAt
                  }
                  team {
                    createdAt
                    id
                    name
                    updatedAt
                  }
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updateAccessmodProjectMember",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAccessmodProjectMember.model_validate(data)

    def update_accessmod_zonal_statistics(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        input: Union[Optional[UpdateAccessmodZonalStatisticsInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateAccessmodZonalStatistics:
        query = gql(
            """
            mutation updateAccessmodZonalStatistics($page: Int, $perPage: Int, $input: UpdateAccessmodZonalStatisticsInput) {
              updateAccessmodZonalStatistics(input: $input) {
                analysis {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  boundaries {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  createdAt
                  id
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    delete
                    run
                    update
                  }
                  population {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  status
                  timeThresholds
                  travelTimes {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  type
                  updatedAt
                  zonalStatisticsGeo {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  zonalStatisticsTable {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="updateAccessmodZonalStatistics",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAccessmodZonalStatistics.model_validate(data)

    def update_connection(
        self, input: UpdateConnectionInput, **kwargs: Any
    ) -> UpdateConnection:
        query = gql(
            """
            mutation updateConnection($input: UpdateConnectionInput!) {
              updateConnection(input: $input) {
                connection {
                  __typename
                  createdAt
                  description
                  fields {
                    code
                    createdAt
                    secret
                    updatedAt
                    value
                  }
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  slug
                  type
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updateConnection",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateConnection.model_validate(data)

    def update_dag(
        self,
        input: UpdateDAGInput,
        order_by: Union[Optional[DAGRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateDAG:
        query = gql(
            """
            mutation updateDAG($orderBy: DAGRunOrderBy, $page: Int, $perPage: Int, $input: UpdateDAGInput!) {
              updateDAG(input: $input) {
                dag {
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  description
                  externalId
                  externalUrl
                  formCode
                  id
                  label
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  tags {
                    id
                    name
                  }
                  template {
                    code
                    description
                    sampleConfig
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="updateDAG", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateDAG.model_validate(data)

    def update_dataset(
        self,
        id: str,
        input: UpdateDatasetInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateDataset:
        query = gql(
            """
            mutation updateDataset($page: Int, $perPage: Int, $id: ID!, $page1: Int, $perPage1: Int, $input: UpdateDatasetInput!) {
              updateDataset(input: $input) {
                dataset {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  id
                  latestVersion {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  links(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createVersion
                    delete
                    update
                  }
                  slug
                  targetId
                  updatedAt
                  version(id: $id) {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "id": id,
            "page1": page_1,
            "perPage1": per_page_1,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="updateDataset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateDataset.model_validate(data)

    def update_dataset_version(
        self,
        name: str,
        input: UpdateDatasetVersionInput,
        attachment: Union[Optional[bool], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateDatasetVersion:
        query = gql(
            """
            mutation updateDatasetVersion($attachment: Boolean, $name: String!, $page: Int, $perPage: Int, $input: UpdateDatasetVersionInput!) {
              updateDatasetVersion(input: $input) {
                errors
                success
                version {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  changelog
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  fileByName(name: $name) {
                    contentType
                    createdAt
                    downloadUrl(attachment: $attachment)
                    filename
                    id
                    properties
                    size
                    targetId
                    uri
                  }
                  files(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  id
                  name
                  permissions {
                    delete
                    download
                    update
                  }
                  targetId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "attachment": attachment,
            "name": name,
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="updateDatasetVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDatasetVersion.model_validate(data)

    def update_membership(
        self, input: UpdateMembershipInput, **kwargs: Any
    ) -> UpdateMembership:
        query = gql(
            """
            mutation updateMembership($input: UpdateMembershipInput!) {
              updateMembership(input: $input) {
                errors
                membership {
                  createdAt
                  id
                  permissions {
                    delete
                    update
                  }
                  role
                  team {
                    createdAt
                    id
                    name
                    updatedAt
                  }
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updateMembership",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateMembership.model_validate(data)

    def update_pipeline(
        self,
        input: UpdatePipelineInput,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdatePipeline:
        query = gql(
            """
            mutation updatePipeline($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $input: UpdatePipelineInput!) {
              updatePipeline(input: $input) {
                errors
                pipeline {
                  code
                  config
                  createdAt
                  currentVersion {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  description
                  hasNewTemplateVersions
                  id
                  name
                  newTemplateVersions {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  notebookPath
                  permissions {
                    createVersion
                    delete
                    run
                    schedule
                    stopPipeline
                    update
                  }
                  recipients {
                    id
                    notificationLevel
                  }
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  sourceTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  type
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  webhookEnabled
                  webhookUrl
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="updatePipeline", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdatePipeline.model_validate(data)

    def update_pipeline_progress(
        self, input: UpdatePipelineProgressInput, **kwargs: Any
    ) -> UpdatePipelineProgress:
        query = gql(
            """
            mutation updatePipelineProgress($input: UpdatePipelineProgressInput!) {
              updatePipelineProgress(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updatePipelineProgress",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdatePipelineProgress.model_validate(data)

    def update_pipeline_recipient(
        self, input: UpdatePipelineRecipientInput, **kwargs: Any
    ) -> UpdatePipelineRecipient:
        query = gql(
            """
            mutation updatePipelineRecipient($input: UpdatePipelineRecipientInput!) {
              updatePipelineRecipient(input: $input) {
                errors
                recipient {
                  id
                  notificationLevel
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updatePipelineRecipient",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdatePipelineRecipient.model_validate(data)

    def update_pipeline_template(
        self,
        input: UpdateTemplateInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdatePipelineTemplate:
        query = gql(
            """
            mutation updatePipelineTemplate($page: Int, $perPage: Int, $input: UpdateTemplateInput!) {
              updatePipelineTemplate(input: $input) {
                errors
                success
                template {
                  code
                  config
                  currentVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  description
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  sourcePipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  updatedAt
                  versions(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query,
            operation_name="updatePipelineTemplate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdatePipelineTemplate.model_validate(data)

    def update_pipeline_version(
        self, input: UpdatePipelineVersionInput, **kwargs: Any
    ) -> UpdatePipelineVersion:
        query = gql(
            """
            mutation updatePipelineVersion($input: UpdatePipelineVersionInput!) {
              updatePipelineVersion(input: $input) {
                errors
                pipelineVersion {
                  config
                  createdAt
                  description
                  externalLink
                  id
                  isLatestVersion
                  name
                  parameters {
                    choices
                    code
                    connection
                    default
                    help
                    multiple
                    name
                    required
                    type
                    widget
                  }
                  permissions {
                    delete
                    update
                  }
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  templateVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  timeout
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionName
                  versionNumber
                  zipfile
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updatePipelineVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdatePipelineVersion.model_validate(data)

    def update_team(
        self,
        input: UpdateTeamInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateTeam:
        query = gql(
            """
            mutation updateTeam($page: Int, $perPage: Int, $input: UpdateTeamInput!) {
              updateTeam(input: $input) {
                errors
                success
                team {
                  createdAt
                  id
                  memberships(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createMembership
                    delete
                    update
                  }
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "input": input,
        }
        response = self.execute(
            query=query, operation_name="updateTeam", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateTeam.model_validate(data)

    def update_template_version(
        self, input: UpdateTemplateVersionInput, **kwargs: Any
    ) -> UpdateTemplateVersion:
        query = gql(
            """
            mutation updateTemplateVersion($input: UpdateTemplateVersionInput!) {
              updateTemplateVersion(input: $input) {
                errors
                success
                templateVersion {
                  changelog
                  createdAt
                  id
                  isLatestVersion
                  permissions {
                    delete
                    update
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionNumber
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updateTemplateVersion",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateTemplateVersion.model_validate(data)

    def update_user(self, input: UpdateUserInput, **kwargs: Any) -> UpdateUser:
        query = gql(
            """
            mutation updateUser($input: UpdateUserInput!) {
              updateUser(input: $input) {
                errors
                success
                user {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="updateUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateUser.model_validate(data)

    def update_webapp(self, input: UpdateWebappInput, **kwargs: Any) -> UpdateWebapp:
        query = gql(
            """
            mutation updateWebapp($input: UpdateWebappInput!) {
              updateWebapp(input: $input) {
                errors
                success
                webapp {
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  icon
                  id
                  isFavorite
                  name
                  permissions {
                    delete
                    update
                  }
                  url
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="updateWebapp", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateWebapp.model_validate(data)

    def update_workspace(
        self,
        input: UpdateWorkspaceInput,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateWorkspace:
        _query = gql(
            """
            mutation updateWorkspace($page: Int, $perPage: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $input: UpdateWorkspaceInput!) {
              updateWorkspace(input: $input) {
                errors
                success
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page, perPage: $perPage, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "input": input,
        }
        response = self.execute(
            query=_query,
            operation_name="updateWorkspace",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateWorkspace.model_validate(data)

    def update_workspace_member(
        self, input: UpdateWorkspaceMemberInput, **kwargs: Any
    ) -> UpdateWorkspaceMember:
        query = gql(
            """
            mutation updateWorkspaceMember($input: UpdateWorkspaceMemberInput!) {
              updateWorkspaceMember(input: $input) {
                errors
                success
                workspaceMembership {
                  createdAt
                  id
                  role
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updateWorkspaceMember",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateWorkspaceMember.model_validate(data)

    def upgrade_pipeline_version_from_template(
        self, input: UpgradePipelineVersionFromTemplateInput, **kwargs: Any
    ) -> UpgradePipelineVersionFromTemplate:
        query = gql(
            """
            mutation upgradePipelineVersionFromTemplate($input: UpgradePipelineVersionFromTemplateInput!) {
              upgradePipelineVersionFromTemplate(input: $input) {
                errors
                pipelineVersion {
                  config
                  createdAt
                  description
                  externalLink
                  id
                  isLatestVersion
                  name
                  parameters {
                    choices
                    code
                    connection
                    default
                    help
                    multiple
                    name
                    required
                    type
                    widget
                  }
                  permissions {
                    delete
                    update
                  }
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  templateVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  timeout
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionName
                  versionNumber
                  zipfile
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="upgradePipelineVersionFromTemplate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpgradePipelineVersionFromTemplate.model_validate(data)

    def upload_pipeline(
        self, input: UploadPipelineInput, **kwargs: Any
    ) -> UploadPipeline:
        query = gql(
            """
            mutation uploadPipeline($input: UploadPipelineInput!) {
              uploadPipeline(input: $input) {
                errors
                pipelineVersion {
                  config
                  createdAt
                  description
                  externalLink
                  id
                  isLatestVersion
                  name
                  parameters {
                    choices
                    code
                    connection
                    default
                    help
                    multiple
                    name
                    required
                    type
                    widget
                  }
                  permissions {
                    delete
                    update
                  }
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  templateVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  timeout
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionName
                  versionNumber
                  zipfile
                }
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="uploadPipeline", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UploadPipeline.model_validate(data)

    def verify_device(self, input: VerifyDeviceInput, **kwargs: Any) -> VerifyDevice:
        query = gql(
            """
            mutation verifyDevice($input: VerifyDeviceInput!) {
              verifyDevice(input: $input) {
                errors
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="verifyDevice", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return VerifyDevice.model_validate(data)

    def accessmod_access_requests(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AccessmodAccessRequests:
        query = gql(
            """
            query accessmodAccessRequests($page: Int, $perPage: Int) {
              accessmodAccessRequests(page: $page, perPage: $perPage) {
                items {
                  acceptedTos
                  createdAt
                  email
                  firstName
                  id
                  lastName
                  status
                  updatedAt
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {"page": page, "perPage": per_page}
        response = self.execute(
            query=query,
            operation_name="accessmodAccessRequests",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodAccessRequests.model_validate(data)

    def accessmod_analyses(
        self,
        project_id: str,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AccessmodAnalyses:
        query = gql(
            """
            query accessmodAnalyses($page: Int, $perPage: Int, $projectId: String!) {
              accessmodAnalyses(page: $page, perPage: $perPage, projectId: $projectId) {
                items {
                  __typename
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  createdAt
                  id
                  name
                  permissions {
                    delete
                    run
                    update
                  }
                  status
                  type
                  updatedAt
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "projectId": project_id,
        }
        response = self.execute(
            query=query,
            operation_name="accessmodAnalyses",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodAnalyses.model_validate(data)

    def accessmod_analysis(
        self, id: Union[Optional[str], UnsetType] = UNSET, **kwargs: Any
    ) -> AccessmodAnalysis:
        query = gql(
            """
            query accessmodAnalysis($id: String) {
              accessmodAnalysis(id: $id) {
                __typename
                author {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                createdAt
                id
                name
                permissions {
                  delete
                  run
                  update
                }
                status
                type
                updatedAt
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query,
            operation_name="accessmodAnalysis",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodAnalysis.model_validate(data)

    def accessmod_fileset(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AccessmodFileset:
        query = gql(
            """
            query accessmodFileset($page: Int, $perPage: Int, $id: String) {
              accessmodFileset(id: $id) {
                author {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                createdAt
                files {
                  createdAt
                  fileset {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  id
                  mimeType
                  name
                  updatedAt
                  uri
                }
                id
                metadata
                mode
                name
                owner {
                  __typename
                  ... on Team {
                    createdAt
                    id
                    memberships(page: $page, perPage: $perPage) {
                      items {
                        createdAt
                        id
                        role
                        updatedAt
                      }
                      pageNumber
                      totalItems
                      totalPages
                    }
                    name
                    permissions {
                      createMembership
                      delete
                      update
                    }
                    updatedAt
                  }
                  ... on User {
                    avatar {
                      color
                      initials
                    }
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                permissions {
                  createFile
                  delete
                  update
                }
                role {
                  code
                  createdAt
                  format
                  id
                  name
                  updatedAt
                }
                status
                updatedAt
              }
            }
            """
        )
        variables: Dict[str, object] = {"page": page, "perPage": per_page, "id": id}
        response = self.execute(
            query=query,
            operation_name="accessmodFileset",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodFileset.model_validate(data)

    def accessmod_fileset_role(self, id: str, **kwargs: Any) -> AccessmodFilesetRole:
        query = gql(
            """
            query accessmodFilesetRole($id: String!) {
              accessmodFilesetRole(id: $id) {
                code
                createdAt
                format
                id
                name
                updatedAt
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query,
            operation_name="accessmodFilesetRole",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodFilesetRole.model_validate(data)

    def accessmod_fileset_roles(self, **kwargs: Any) -> AccessmodFilesetRoles:
        query = gql(
            """
            query accessmodFilesetRoles {
              accessmodFilesetRoles {
                code
                createdAt
                format
                id
                name
                updatedAt
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query,
            operation_name="accessmodFilesetRoles",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodFilesetRoles.model_validate(data)

    def accessmod_filesets(
        self,
        project_id: str,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        mode: Union[Optional[AccessmodFilesetMode], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        role_id: Union[Optional[str], UnsetType] = UNSET,
        term: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AccessmodFilesets:
        query = gql(
            """
            query accessmodFilesets($page: Int, $perPage: Int, $mode: AccessmodFilesetMode, $page1: Int, $perPage1: Int, $projectId: String!, $roleId: String, $term: String) {
              accessmodFilesets(
                mode: $mode
                page: $page1
                perPage: $perPage1
                projectId: $projectId
                roleId: $roleId
                term: $term
              ) {
                items {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  createdAt
                  files {
                    createdAt
                    id
                    mimeType
                    name
                    updatedAt
                    uri
                  }
                  id
                  metadata
                  mode
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    createFile
                    delete
                    update
                  }
                  role {
                    code
                    createdAt
                    format
                    id
                    name
                    updatedAt
                  }
                  status
                  updatedAt
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "mode": mode,
            "page1": page_1,
            "perPage1": per_page_1,
            "projectId": project_id,
            "roleId": role_id,
            "term": term,
        }
        response = self.execute(
            query=query,
            operation_name="accessmodFilesets",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodFilesets.model_validate(data)

    def accessmod_project(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AccessmodProject:
        query = gql(
            """
            query accessmodProject($page: Int, $perPage: Int, $id: String) {
              accessmodProject(id: $id) {
                author {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                country {
                  alpha3
                  code
                  flag
                  name
                  whoInfo {
                    defaultCRS
                    simplifiedExtent
                  }
                }
                createdAt
                crs
                dem {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  createdAt
                  files {
                    createdAt
                    id
                    mimeType
                    name
                    updatedAt
                    uri
                  }
                  id
                  metadata
                  mode
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    createFile
                    delete
                    update
                  }
                  role {
                    code
                    createdAt
                    format
                    id
                    name
                    updatedAt
                  }
                  status
                  updatedAt
                }
                description
                extent
                id
                members {
                  createdAt
                  id
                  mode
                  permissions {
                    delete
                    update
                  }
                  project {
                    createdAt
                    crs
                    description
                    extent
                    id
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    spatialResolution
                    updatedAt
                  }
                  team {
                    createdAt
                    id
                    name
                    updatedAt
                  }
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                name
                owner {
                  __typename
                  ... on Team {
                    createdAt
                    id
                    name
                    updatedAt
                  }
                  ... on User {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                permissions {
                  createAnalysis
                  createFileset
                  createMember
                  createPermission
                  delete
                  update
                }
                spatialResolution
                updatedAt
              }
            }
            """
        )
        variables: Dict[str, object] = {"page": page, "perPage": per_page, "id": id}
        response = self.execute(
            query=query,
            operation_name="accessmodProject",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodProject.model_validate(data)

    def accessmod_projects(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        countries: Union[Optional[List[str]], UnsetType] = UNSET,
        order_by: Union[Optional[AccessmodProjectOrder], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        teams: Union[Optional[List[str]], UnsetType] = UNSET,
        term: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AccessmodProjects:
        query = gql(
            """
            query accessmodProjects($page: Int, $perPage: Int, $countries: [String!], $orderBy: AccessmodProjectOrder, $page1: Int, $perPage1: Int, $teams: [String!], $term: String) {
              accessmodProjects(
                countries: $countries
                orderBy: $orderBy
                page: $page1
                perPage: $perPage1
                teams: $teams
                term: $term
              ) {
                items {
                  author {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  country {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  crs
                  dem {
                    createdAt
                    id
                    metadata
                    mode
                    name
                    owner {
                      __typename
                      ... on Team {
                        createdAt
                        id
                        name
                        updatedAt
                      }
                      ... on User {
                        dateJoined
                        displayName
                        email
                        firstName
                        id
                        language
                        lastLogin
                        lastName
                      }
                    }
                    status
                    updatedAt
                  }
                  description
                  extent
                  id
                  members {
                    createdAt
                    id
                    mode
                    updatedAt
                  }
                  name
                  owner {
                    __typename
                    ... on Team {
                      createdAt
                      id
                      memberships(page: $page, perPage: $perPage) {
                        pageNumber
                        totalItems
                        totalPages
                      }
                      name
                      permissions {
                        createMembership
                        delete
                        update
                      }
                      updatedAt
                    }
                    ... on User {
                      avatar {
                        color
                        initials
                      }
                      dateJoined
                      displayName
                      email
                      firstName
                      id
                      language
                      lastLogin
                      lastName
                    }
                  }
                  permissions {
                    createAnalysis
                    createFileset
                    createMember
                    createPermission
                    delete
                    update
                  }
                  spatialResolution
                  updatedAt
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "countries": countries,
            "orderBy": order_by,
            "page1": page_1,
            "perPage1": per_page_1,
            "teams": teams,
            "term": term,
        }
        response = self.execute(
            query=query,
            operation_name="accessmodProjects",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AccessmodProjects.model_validate(data)

    def boundaries(self, country_code: str, level: str, **kwargs: Any) -> Boundaries:
        query = gql(
            """
            query boundaries($country_code: String!, $level: String!) {
              boundaries(country_code: $country_code, level: $level) {
                administrative_level
                country {
                  alpha3
                  code
                  flag
                  name
                  whoInfo {
                    defaultCRS
                    simplifiedExtent
                  }
                }
                extent
                id
                name
                parent
              }
            }
            """
        )
        variables: Dict[str, object] = {"country_code": country_code, "level": level}
        response = self.execute(
            query=query, operation_name="boundaries", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Boundaries.model_validate(data)

    def config(self, **kwargs: Any) -> Config:
        query = gql(
            """
            query config {
              config {
                passwordRequirements
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="config", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Config.model_validate(data)

    def connection(self, id: Any, **kwargs: Any) -> Connection:
        query = gql(
            """
            query connection($id: UUID!) {
              connection(id: $id) {
                __typename
                createdAt
                description
                fields {
                  code
                  createdAt
                  secret
                  updatedAt
                  value
                }
                id
                name
                permissions {
                  delete
                  update
                }
                slug
                type
                updatedAt
                user {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query, operation_name="connection", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Connection.model_validate(data)

    def connection_by_slug(
        self, connection_slug: str, workspace_slug: str, **kwargs: Any
    ) -> ConnectionBySlug:
        query = gql(
            """
            query connectionBySlug($connectionSlug: String!, $workspaceSlug: String!) {
              connectionBySlug(connectionSlug: $connectionSlug, workspaceSlug: $workspaceSlug) {
                __typename
                createdAt
                description
                fields {
                  code
                  createdAt
                  secret
                  updatedAt
                  value
                }
                id
                name
                permissions {
                  delete
                  update
                }
                slug
                type
                updatedAt
                user {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "connectionSlug": connection_slug,
            "workspaceSlug": workspace_slug,
        }
        response = self.execute(
            query=query,
            operation_name="connectionBySlug",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ConnectionBySlug.model_validate(data)

    def countries(self, **kwargs: Any) -> Countries:
        query = gql(
            """
            query countries {
              countries {
                alpha3
                code
                flag
                name
                whoInfo {
                  defaultCRS
                  region {
                    code
                    name
                  }
                  simplifiedExtent
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="countries", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Countries.model_validate(data)

    def country(
        self,
        alpha_3: Union[Optional[str], UnsetType] = UNSET,
        code: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Country:
        query = gql(
            """
            query country($alpha3: String, $code: String) {
              country(alpha3: $alpha3, code: $code) {
                alpha3
                code
                flag
                name
                whoInfo {
                  defaultCRS
                  region {
                    code
                    name
                  }
                  simplifiedExtent
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"alpha3": alpha_3, "code": code}
        response = self.execute(
            query=query, operation_name="country", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Country.model_validate(data)

    def dag(
        self,
        id: Any,
        order_by: Union[Optional[DAGRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Dag:
        query = gql(
            """
            query dag($orderBy: DAGRunOrderBy, $page: Int, $perPage: Int, $id: UUID!) {
              dag(id: $id) {
                countries {
                  alpha3
                  code
                  flag
                  name
                  whoInfo {
                    defaultCRS
                    simplifiedExtent
                  }
                }
                description
                externalId
                externalUrl
                formCode
                id
                label
                runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                  items {
                    config
                    duration
                    executionDate
                    externalId
                    externalUrl
                    id
                    isFavorite
                    label
                    lastRefreshedAt
                    logs
                    progress
                    status
                    triggerMode
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                schedule
                tags {
                  id
                  name
                }
                template {
                  code
                  description
                  sampleConfig
                }
                user {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "id": id,
        }
        response = self.execute(
            query=query, operation_name="dag", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Dag.model_validate(data)

    def dag_run(self, id: Any, **kwargs: Any) -> DagRun:
        query = gql(
            """
            query dagRun($id: UUID!) {
              dagRun(id: $id) {
                config
                duration
                executionDate
                externalId
                externalUrl
                id
                isFavorite
                label
                lastRefreshedAt
                logs
                messages {
                  message
                  priority
                  timestamp
                }
                outputs {
                  title
                  uri
                }
                progress
                status
                triggerMode
                user {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query, operation_name="dagRun", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DagRun.model_validate(data)

    def dags(
        self,
        order_by: Union[Optional[DAGRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Dags:
        query = gql(
            """
            query dags($orderBy: DAGRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int) {
              dags(page: $page1, perPage: $perPage1) {
                items {
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  description
                  externalId
                  externalUrl
                  formCode
                  id
                  label
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  tags {
                    id
                    name
                  }
                  template {
                    code
                    description
                    sampleConfig
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
        }
        response = self.execute(
            query=query, operation_name="dags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Dags.model_validate(data)

    def database_table(
        self,
        direction: OrderByDirection,
        order_by: str,
        page: int,
        id: str,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DatabaseTable:
        query = gql(
            """
            query databaseTable($direction: OrderByDirection!, $orderBy: String!, $page: Int!, $perPage: Int, $id: String!) {
              databaseTable(id: $id) {
                columns {
                  name
                  type
                }
                count
                name
                rows(direction: $direction, orderBy: $orderBy, page: $page, perPage: $perPage) {
                  hasNextPage
                  hasPreviousPage
                  items
                  pageNumber
                }
                sample
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "direction": direction,
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "id": id,
        }
        response = self.execute(
            query=query, operation_name="databaseTable", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DatabaseTable.model_validate(data)

    def dataset(
        self,
        name: str,
        name_1: str,
        id: str,
        id_1: str,
        attachment: Union[Optional[bool], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        attachment_1: Union[Optional[bool], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        per_page_4: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        per_page_5: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        per_page_6: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Dataset:
        _query = gql(
            """
            query dataset($attachment: Boolean, $name: String!, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $attachment1: Boolean, $name1: String!, $page2: Int, $perPage2: Int, $id: ID!, $page3: Int, $perPage3: Int, $page4: Int, $perPage4: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page5: Int, $perPage5: Int, $page6: Int, $perPage6: Int, $id1: ID!) {
              dataset(id: $id1) {
                attributes {
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  id
                  key
                  label
                  system
                  updatedAt
                  updatedBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  value
                }
                createdAt
                createdBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                description
                id
                latestVersion {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  changelog
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  fileByName(name: $name) {
                    contentType
                    createdAt
                    downloadUrl(attachment: $attachment)
                    filename
                    id
                    properties
                    size
                    targetId
                    uri
                  }
                  files(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  id
                  name
                  permissions {
                    delete
                    download
                    update
                  }
                  targetId
                }
                links(page: $page1, perPage: $perPage1) {
                  items {
                    createdAt
                    id
                    isPinned
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                name
                permissions {
                  createVersion
                  delete
                  update
                }
                slug
                targetId
                updatedAt
                version(id: $id) {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  changelog
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  fileByName(name: $name1) {
                    contentType
                    createdAt
                    downloadUrl(attachment: $attachment1)
                    filename
                    id
                    properties
                    size
                    targetId
                    uri
                  }
                  files(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  id
                  name
                  permissions {
                    delete
                    download
                    update
                  }
                  targetId
                }
                versions(page: $page3, perPage: $perPage3) {
                  items {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page4, perPage: $perPage4, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page5, perPage: $perPage5) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page6, perPage: $perPage6) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "attachment": attachment,
            "name": name,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "attachment1": attachment_1,
            "name1": name_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "id": id,
            "page3": page_3,
            "perPage3": per_page_3,
            "page4": page_4,
            "perPage4": per_page_4,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page5": page_5,
            "perPage5": per_page_5,
            "page6": page_6,
            "perPage6": per_page_6,
            "id1": id_1,
        }
        response = self.execute(
            query=_query, operation_name="dataset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Dataset.model_validate(data)

    def dataset_link(
        self,
        id: str,
        id_1: str,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        per_page_4: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DatasetLink:
        _query = gql(
            """
            query datasetLink($page: Int, $perPage: Int, $id: ID!, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page3: Int, $perPage3: Int, $page4: Int, $perPage4: Int, $id1: ID!) {
              datasetLink(id: $id1) {
                createdAt
                createdBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                dataset {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  id
                  latestVersion {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  links(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createVersion
                    delete
                    update
                  }
                  slug
                  targetId
                  updatedAt
                  version(id: $id) {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                id
                isPinned
                permissions {
                  delete
                  pin
                }
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page2, perPage: $perPage2, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page3, perPage: $perPage3) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page4, perPage: $perPage4) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "id": id,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page3": page_3,
            "perPage3": per_page_3,
            "page4": page_4,
            "perPage4": per_page_4,
            "id1": id_1,
        }
        response = self.execute(
            query=_query, operation_name="datasetLink", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DatasetLink.model_validate(data)

    def dataset_link_by_slug(
        self,
        id: str,
        dataset_slug: str,
        workspace_slug: str,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        per_page_4: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DatasetLinkBySlug:
        _query = gql(
            """
            query datasetLinkBySlug($page: Int, $perPage: Int, $id: ID!, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page3: Int, $perPage3: Int, $page4: Int, $perPage4: Int, $datasetSlug: String!, $workspaceSlug: String!) {
              datasetLinkBySlug(datasetSlug: $datasetSlug, workspaceSlug: $workspaceSlug) {
                createdAt
                createdBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                dataset {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  id
                  latestVersion {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  links(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createVersion
                    delete
                    update
                  }
                  slug
                  targetId
                  updatedAt
                  version(id: $id) {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                id
                isPinned
                permissions {
                  delete
                  pin
                }
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page2, perPage: $perPage2, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page3, perPage: $perPage3) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page4, perPage: $perPage4) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "id": id,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page3": page_3,
            "perPage3": per_page_3,
            "page4": page_4,
            "perPage4": per_page_4,
            "datasetSlug": dataset_slug,
            "workspaceSlug": workspace_slug,
        }
        response = self.execute(
            query=_query,
            operation_name="datasetLinkBySlug",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DatasetLinkBySlug.model_validate(data)

    def dataset_version(
        self,
        id: str,
        name: str,
        id_1: str,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        attachment: Union[Optional[bool], UnsetType] = UNSET,
        attachment_1: Union[Optional[bool], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DatasetVersion:
        query = gql(
            """
            query datasetVersion($page: Int, $perPage: Int, $id: ID!, $page1: Int, $perPage1: Int, $attachment: Boolean, $name: String!, $attachment1: Boolean, $page2: Int, $perPage2: Int, $id1: ID!) {
              datasetVersion(id: $id1) {
                attributes {
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  id
                  key
                  label
                  system
                  updatedAt
                  updatedBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  value
                }
                changelog
                createdAt
                createdBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                dataset {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  id
                  latestVersion {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  links(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createVersion
                    delete
                    update
                  }
                  slug
                  targetId
                  updatedAt
                  version(id: $id) {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                fileByName(name: $name) {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  contentType
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  downloadUrl(attachment: $attachment)
                  fileSample {
                    sample
                    status
                    statusReason
                  }
                  filename
                  id
                  properties
                  size
                  targetId
                  uri
                }
                files(page: $page2, perPage: $perPage2) {
                  items {
                    contentType
                    createdAt
                    downloadUrl(attachment: $attachment1)
                    filename
                    id
                    properties
                    size
                    targetId
                    uri
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                id
                name
                permissions {
                  delete
                  download
                  update
                }
                targetId
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "id": id,
            "page1": page_1,
            "perPage1": per_page_1,
            "attachment": attachment,
            "name": name,
            "attachment1": attachment_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "id1": id_1,
        }
        response = self.execute(
            query=query, operation_name="datasetVersion", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DatasetVersion.model_validate(data)

    def dataset_version_file(
        self,
        id: str,
        attachment: Union[Optional[bool], UnsetType] = UNSET,
        **kwargs: Any
    ) -> DatasetVersionFile:
        query = gql(
            """
            query datasetVersionFile($attachment: Boolean, $id: ID!) {
              datasetVersionFile(id: $id) {
                attributes {
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  id
                  key
                  label
                  system
                  updatedAt
                  updatedBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  value
                }
                contentType
                createdAt
                createdBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                downloadUrl(attachment: $attachment)
                fileSample {
                  sample
                  status
                  statusReason
                }
                filename
                id
                properties
                size
                targetId
                uri
              }
            }
            """
        )
        variables: Dict[str, object] = {"attachment": attachment, "id": id}
        response = self.execute(
            query=query,
            operation_name="datasetVersionFile",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DatasetVersionFile.model_validate(data)

    def datasets(
        self,
        id: str,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Datasets:
        _query = gql(
            """
            query datasets($page: Int, $perPage: Int, $id: ID!, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $query: String) {
              datasets(page: $page2, perPage: $perPage2, query: $query) {
                items {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  id
                  latestVersion {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  links(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createVersion
                    delete
                    update
                  }
                  slug
                  targetId
                  updatedAt
                  version(id: $id) {
                    changelog
                    createdAt
                    id
                    name
                    targetId
                  }
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "id": id,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "query": query,
        }
        response = self.execute(
            query=_query, operation_name="datasets", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Datasets.model_validate(data)

    def me(self, **kwargs: Any) -> Me:
        query = gql(
            """
            query me {
              me {
                features {
                  code
                }
                hasTwoFactorEnabled
                permissions {
                  adminPanel
                  createAccessmodProject
                  createTeam
                  createWorkspace
                  manageAccessmodAccessRequests
                  superUser
                }
                user {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="me", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Me.model_validate(data)

    def metadata_attributes(self, target_id: Any, **kwargs: Any) -> MetadataAttributes:
        query = gql(
            """
            query metadataAttributes($targetId: OpaqueID!) {
              metadataAttributes(targetId: $targetId) {
                createdAt
                createdBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                id
                key
                label
                system
                updatedAt
                updatedBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                value
              }
            }
            """
        )
        variables: Dict[str, object] = {"targetId": target_id}
        response = self.execute(
            query=query,
            operation_name="metadataAttributes",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return MetadataAttributes.model_validate(data)

    def notebooks_url(self, **kwargs: Any) -> NotebooksUrl:
        query = gql(
            """
            query notebooksUrl {
              notebooksUrl
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="notebooksUrl", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return NotebooksUrl.model_validate(data)

    def organizations(self, **kwargs: Any) -> Organizations:
        query = gql(
            """
            query organizations {
              organizations {
                contactInfo
                id
                name
                type
                url
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="organizations", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Organizations.model_validate(data)

    def pending_workspace_invitations(
        self,
        page: int,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> PendingWorkspaceInvitations:
        query = gql(
            """
            query pendingWorkspaceInvitations($page: Int!, $perPage: Int) {
              pendingWorkspaceInvitations(page: $page, perPage: $perPage) {
                items {
                  createdAt
                  email
                  id
                  invitedBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  role
                  status
                  updatedAt
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {"page": page, "perPage": per_page}
        response = self.execute(
            query=query,
            operation_name="pendingWorkspaceInvitations",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PendingWorkspaceInvitations.model_validate(data)

    def pipeline(
        self,
        id: Any,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        per_page_4: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        per_page_5: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        per_page_6: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Pipeline:
        _query = gql(
            """
            query pipeline($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $page3: Int, $perPage3: Int, $page4: Int, $perPage4: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page5: Int, $perPage5: Int, $page6: Int, $perPage6: Int, $id: UUID!) {
              pipeline(id: $id) {
                code
                config
                createdAt
                currentVersion {
                  config
                  createdAt
                  description
                  externalLink
                  id
                  isLatestVersion
                  name
                  parameters {
                    choices
                    code
                    connection
                    default
                    help
                    multiple
                    name
                    required
                    type
                    widget
                  }
                  permissions {
                    delete
                    update
                  }
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  templateVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  timeout
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionName
                  versionNumber
                  zipfile
                }
                description
                hasNewTemplateVersions
                id
                name
                newTemplateVersions {
                  changelog
                  createdAt
                  id
                  isLatestVersion
                  permissions {
                    delete
                    update
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionNumber
                }
                notebookPath
                permissions {
                  createTemplateVersion {
                    isAllowed
                    reasons
                  }
                  createVersion
                  delete
                  run
                  schedule
                  stopPipeline
                  update
                }
                recipients {
                  id
                  notificationLevel
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                  items {
                    code
                    config
                    duration
                    enableDebugLogs
                    executionDate
                    id
                    logs
                    outputs {
                      __typename
                      ... on BucketObject {
                        key
                        name
                        path
                        size
                        type
                        updatedAt
                      }
                      ... on DatabaseTable {
                        count
                        name
                        sample
                      }
                      ... on GenericOutput {
                        genericName
                        genericType
                        genericUri
                      }
                    }
                    progress
                    run_id
                    sendMailNotifications
                    status
                    timeout
                    triggerMode
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                schedule
                sourceTemplate {
                  code
                  config
                  currentVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  description
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  sourcePipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                template {
                  code
                  config
                  currentVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  description
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  sourcePipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  updatedAt
                  versions(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                type
                updatedAt
                versions(page: $page3, perPage: $perPage3) {
                  items {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                webhookEnabled
                webhookUrl
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page4, perPage: $perPage4, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page5, perPage: $perPage5) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page6, perPage: $perPage6) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "page3": page_3,
            "perPage3": per_page_3,
            "page4": page_4,
            "perPage4": per_page_4,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page5": page_5,
            "perPage5": per_page_5,
            "page6": page_6,
            "perPage6": per_page_6,
            "id": id,
        }
        response = self.execute(
            query=_query, operation_name="pipeline", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Pipeline.model_validate(data)

    def pipeline_by_code(
        self,
        code: str,
        workspace_slug: str,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        per_page_4: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        per_page_5: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        per_page_6: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> PipelineByCode:
        _query = gql(
            """
            query pipelineByCode($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $page3: Int, $perPage3: Int, $page4: Int, $perPage4: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page5: Int, $perPage5: Int, $page6: Int, $perPage6: Int, $code: String!, $workspaceSlug: String!) {
              pipelineByCode(code: $code, workspaceSlug: $workspaceSlug) {
                code
                config
                createdAt
                currentVersion {
                  config
                  createdAt
                  description
                  externalLink
                  id
                  isLatestVersion
                  name
                  parameters {
                    choices
                    code
                    connection
                    default
                    help
                    multiple
                    name
                    required
                    type
                    widget
                  }
                  permissions {
                    delete
                    update
                  }
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  templateVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  timeout
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionName
                  versionNumber
                  zipfile
                }
                description
                hasNewTemplateVersions
                id
                name
                newTemplateVersions {
                  changelog
                  createdAt
                  id
                  isLatestVersion
                  permissions {
                    delete
                    update
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionNumber
                }
                notebookPath
                permissions {
                  createTemplateVersion {
                    isAllowed
                    reasons
                  }
                  createVersion
                  delete
                  run
                  schedule
                  stopPipeline
                  update
                }
                recipients {
                  id
                  notificationLevel
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                  items {
                    code
                    config
                    duration
                    enableDebugLogs
                    executionDate
                    id
                    logs
                    outputs {
                      __typename
                      ... on BucketObject {
                        key
                        name
                        path
                        size
                        type
                        updatedAt
                      }
                      ... on DatabaseTable {
                        count
                        name
                        sample
                      }
                      ... on GenericOutput {
                        genericName
                        genericType
                        genericUri
                      }
                    }
                    progress
                    run_id
                    sendMailNotifications
                    status
                    timeout
                    triggerMode
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                schedule
                sourceTemplate {
                  code
                  config
                  currentVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  description
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  sourcePipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                template {
                  code
                  config
                  currentVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  description
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  sourcePipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  updatedAt
                  versions(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                type
                updatedAt
                versions(page: $page3, perPage: $perPage3) {
                  items {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                webhookEnabled
                webhookUrl
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page4, perPage: $perPage4, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page5, perPage: $perPage5) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page6, perPage: $perPage6) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "page3": page_3,
            "perPage3": per_page_3,
            "page4": page_4,
            "perPage4": per_page_4,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page5": page_5,
            "perPage5": per_page_5,
            "page6": page_6,
            "perPage6": per_page_6,
            "code": code,
            "workspaceSlug": workspace_slug,
        }
        response = self.execute(
            query=_query, operation_name="pipelineByCode", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PipelineByCode.model_validate(data)

    def pipeline_run(
        self,
        name: str,
        direction: OrderByDirection,
        order_by: str,
        page_1: int,
        id: Any,
        attachment: Union[Optional[bool], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        order_by_1: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> PipelineRun:
        query = gql(
            """
            query pipelineRun($attachment: Boolean, $name: String!, $page: Int, $perPage: Int, $direction: OrderByDirection!, $orderBy: String!, $page1: Int!, $perPage1: Int, $orderBy1: PipelineRunOrderBy, $page2: Int, $perPage2: Int, $page3: Int, $perPage3: Int, $id: UUID!) {
              pipelineRun(id: $id) {
                code
                config
                datasetVersions {
                  attributes {
                    createdAt
                    id
                    key
                    label
                    system
                    updatedAt
                    value
                  }
                  changelog
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  fileByName(name: $name) {
                    contentType
                    createdAt
                    downloadUrl(attachment: $attachment)
                    filename
                    id
                    properties
                    size
                    targetId
                    uri
                  }
                  files(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  id
                  name
                  permissions {
                    delete
                    download
                    update
                  }
                  targetId
                }
                duration
                enableDebugLogs
                executionDate
                id
                logs
                messages {
                  message
                  priority
                  timestamp
                }
                outputs {
                  __typename
                  ... on BucketObject {
                    key
                    name
                    path
                    size
                    type
                    updatedAt
                  }
                  ... on DatabaseTable {
                    columns {
                      name
                      type
                    }
                    count
                    name
                    rows(direction: $direction, orderBy: $orderBy, page: $page1, perPage: $perPage1) {
                      hasNextPage
                      hasPreviousPage
                      items
                      pageNumber
                    }
                    sample
                  }
                  ... on GenericOutput {
                    genericName
                    genericType
                    genericUri
                  }
                }
                pipeline {
                  code
                  config
                  createdAt
                  currentVersion {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  description
                  hasNewTemplateVersions
                  id
                  name
                  newTemplateVersions {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  notebookPath
                  permissions {
                    createVersion
                    delete
                    run
                    schedule
                    stopPipeline
                    update
                  }
                  recipients {
                    id
                    notificationLevel
                  }
                  runs(orderBy: $orderBy1, page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  sourceTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  type
                  updatedAt
                  versions(page: $page3, perPage: $perPage3) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  webhookEnabled
                  webhookUrl
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                progress
                run_id
                sendMailNotifications
                status
                stoppedBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                timeout
                triggerMode
                user {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                version {
                  config
                  createdAt
                  description
                  externalLink
                  id
                  isLatestVersion
                  name
                  parameters {
                    choices
                    code
                    connection
                    default
                    help
                    multiple
                    name
                    required
                    type
                    widget
                  }
                  permissions {
                    delete
                    update
                  }
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  templateVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  timeout
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionName
                  versionNumber
                  zipfile
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "attachment": attachment,
            "name": name,
            "page": page,
            "perPage": per_page,
            "direction": direction,
            "orderBy": order_by,
            "page1": page_1,
            "perPage1": per_page_1,
            "orderBy1": order_by_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "page3": page_3,
            "perPage3": per_page_3,
            "id": id,
        }
        response = self.execute(
            query=query, operation_name="pipelineRun", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PipelineRun.model_validate(data)

    def pipeline_templates(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        search: Union[Optional[str], UnsetType] = UNSET,
        workspace_slug: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> PipelineTemplates:
        query = gql(
            """
            query pipelineTemplates($page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $search: String, $workspaceSlug: String) {
              pipelineTemplates(
                page: $page1
                perPage: $perPage1
                search: $search
                workspaceSlug: $workspaceSlug
              ) {
                items {
                  code
                  config
                  currentVersion {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  description
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  sourcePipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  updatedAt
                  versions(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "search": search,
            "workspaceSlug": workspace_slug,
        }
        response = self.execute(
            query=query,
            operation_name="pipelineTemplates",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PipelineTemplates.model_validate(data)

    def pipeline_version(
        self,
        id: Any,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> PipelineVersion:
        query = gql(
            """
            query pipelineVersion($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $id: UUID!) {
              pipelineVersion(id: $id) {
                config
                createdAt
                description
                externalLink
                id
                isLatestVersion
                name
                parameters {
                  choices
                  code
                  connection
                  default
                  help
                  multiple
                  name
                  required
                  type
                  widget
                }
                permissions {
                  delete
                  update
                }
                pipeline {
                  code
                  config
                  createdAt
                  currentVersion {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  description
                  hasNewTemplateVersions
                  id
                  name
                  newTemplateVersions {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  notebookPath
                  permissions {
                    createVersion
                    delete
                    run
                    schedule
                    stopPipeline
                    update
                  }
                  recipients {
                    id
                    notificationLevel
                  }
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  sourceTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  type
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  webhookEnabled
                  webhookUrl
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                templateVersion {
                  changelog
                  createdAt
                  id
                  isLatestVersion
                  permissions {
                    delete
                    update
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionNumber
                }
                timeout
                user {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                versionName
                versionNumber
                zipfile
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "id": id,
        }
        response = self.execute(
            query=query, operation_name="pipelineVersion", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PipelineVersion.model_validate(data)

    def pipelines(
        self,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        search: Union[Optional[str], UnsetType] = UNSET,
        workspace_slug: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Pipelines:
        query = gql(
            """
            query pipelines($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $name: String, $page2: Int, $perPage2: Int, $search: String, $workspaceSlug: String) {
              pipelines(
                name: $name
                page: $page2
                perPage: $perPage2
                search: $search
                workspaceSlug: $workspaceSlug
              ) {
                items {
                  code
                  config
                  createdAt
                  currentVersion {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  description
                  hasNewTemplateVersions
                  id
                  name
                  newTemplateVersions {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  notebookPath
                  permissions {
                    createVersion
                    delete
                    run
                    schedule
                    stopPipeline
                    update
                  }
                  recipients {
                    id
                    notificationLevel
                  }
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  sourceTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  type
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  webhookEnabled
                  webhookUrl
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "name": name,
            "page2": page_2,
            "perPage2": per_page_2,
            "search": search,
            "workspaceSlug": workspace_slug,
        }
        response = self.execute(
            query=query, operation_name="pipelines", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Pipelines.model_validate(data)

    def search_database_tables(
        self,
        query: str,
        workspace_slugs: List[str],
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchDatabaseTables:
        _query = gql(
            """
            query searchDatabaseTables($page: Int, $perPage: Int, $query: String!, $workspaceSlugs: [String]!) {
              searchDatabaseTables(
                page: $page
                perPage: $perPage
                query: $query
                workspaceSlugs: $workspaceSlugs
              ) {
                items {
                  databaseTable {
                    count
                    name
                    sample
                  }
                  score
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "query": query,
            "workspaceSlugs": workspace_slugs,
        }
        response = self.execute(
            query=_query,
            operation_name="searchDatabaseTables",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SearchDatabaseTables.model_validate(data)

    def search_datasets(
        self,
        query: str,
        workspace_slugs: List[str],
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchDatasets:
        _query = gql(
            """
            query searchDatasets($page: Int, $perPage: Int, $query: String!, $workspaceSlugs: [String]!) {
              searchDatasets(
                page: $page
                perPage: $perPage
                query: $query
                workspaceSlugs: $workspaceSlugs
              ) {
                items {
                  dataset {
                    createdAt
                    description
                    id
                    name
                    slug
                    targetId
                    updatedAt
                  }
                  score
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "query": query,
            "workspaceSlugs": workspace_slugs,
        }
        response = self.execute(
            query=_query, operation_name="searchDatasets", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SearchDatasets.model_validate(data)

    def search_files(
        self,
        query: str,
        workspace_slugs: List[str],
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchFiles:
        _query = gql(
            """
            query searchFiles($page: Int, $perPage: Int, $query: String!, $workspaceSlugs: [String]!) {
              searchFiles(
                page: $page
                perPage: $perPage
                query: $query
                workspaceSlugs: $workspaceSlugs
              ) {
                items {
                  file {
                    key
                    name
                    path
                    size
                    type
                    updated
                  }
                  score
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "query": query,
            "workspaceSlugs": workspace_slugs,
        }
        response = self.execute(
            query=_query, operation_name="searchFiles", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SearchFiles.model_validate(data)

    def search_pipeline_templates(
        self,
        query: str,
        workspace_slugs: List[str],
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchPipelineTemplates:
        _query = gql(
            """
            query searchPipelineTemplates($page: Int, $perPage: Int, $query: String!, $workspaceSlugs: [String]!) {
              searchPipelineTemplates(
                page: $page
                perPage: $perPage
                query: $query
                workspaceSlugs: $workspaceSlugs
              ) {
                items {
                  pipelineTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  score
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "query": query,
            "workspaceSlugs": workspace_slugs,
        }
        response = self.execute(
            query=_query,
            operation_name="searchPipelineTemplates",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SearchPipelineTemplates.model_validate(data)

    def search_pipelines(
        self,
        query: str,
        workspace_slugs: List[str],
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchPipelines:
        _query = gql(
            """
            query searchPipelines($page: Int, $perPage: Int, $query: String!, $workspaceSlugs: [String]!) {
              searchPipelines(
                page: $page
                perPage: $perPage
                query: $query
                workspaceSlugs: $workspaceSlugs
              ) {
                items {
                  pipeline {
                    code
                    config
                    createdAt
                    description
                    hasNewTemplateVersions
                    id
                    name
                    notebookPath
                    schedule
                    type
                    updatedAt
                    webhookEnabled
                    webhookUrl
                  }
                  score
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "query": query,
            "workspaceSlugs": workspace_slugs,
        }
        response = self.execute(
            query=_query,
            operation_name="searchPipelines",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SearchPipelines.model_validate(data)

    def team(
        self,
        id: Any,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Team:
        query = gql(
            """
            query team($page: Int, $perPage: Int, $id: UUID!) {
              team(id: $id) {
                createdAt
                id
                memberships(page: $page, perPage: $perPage) {
                  items {
                    createdAt
                    id
                    role
                    updatedAt
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                name
                permissions {
                  createMembership
                  delete
                  update
                }
                updatedAt
              }
            }
            """
        )
        variables: Dict[str, object] = {"page": page, "perPage": per_page, "id": id}
        response = self.execute(
            query=query, operation_name="team", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Team.model_validate(data)

    def teams(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        term: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Teams:
        query = gql(
            """
            query teams($page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $term: String) {
              teams(page: $page1, perPage: $perPage1, term: $term) {
                items {
                  createdAt
                  id
                  memberships(page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createMembership
                    delete
                    update
                  }
                  updatedAt
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "term": term,
        }
        response = self.execute(
            query=query, operation_name="teams", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Teams.model_validate(data)

    def template_by_code(
        self,
        code: str,
        order_by: Union[Optional[PipelineRunOrderBy], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        per_page_4: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        per_page_5: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> TemplateByCode:
        _query = gql(
            """
            query templateByCode($orderBy: PipelineRunOrderBy, $page: Int, $perPage: Int, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $page3: Int, $perPage3: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page4: Int, $perPage4: Int, $page5: Int, $perPage5: Int, $code: String!) {
              templateByCode(code: $code) {
                code
                config
                currentVersion {
                  changelog
                  createdAt
                  id
                  isLatestVersion
                  permissions {
                    delete
                    update
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  versionNumber
                }
                description
                id
                name
                permissions {
                  delete
                  update
                }
                sourcePipeline {
                  code
                  config
                  createdAt
                  currentVersion {
                    config
                    createdAt
                    description
                    externalLink
                    id
                    isLatestVersion
                    name
                    timeout
                    versionName
                    versionNumber
                    zipfile
                  }
                  description
                  hasNewTemplateVersions
                  id
                  name
                  newTemplateVersions {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  notebookPath
                  permissions {
                    createVersion
                    delete
                    run
                    schedule
                    stopPipeline
                    update
                  }
                  recipients {
                    id
                    notificationLevel
                  }
                  runs(orderBy: $orderBy, page: $page, perPage: $perPage) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  schedule
                  sourceTemplate {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  template {
                    code
                    config
                    description
                    id
                    name
                    updatedAt
                  }
                  type
                  updatedAt
                  versions(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  webhookEnabled
                  webhookUrl
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                updatedAt
                versions(page: $page2, perPage: $perPage2) {
                  items {
                    changelog
                    createdAt
                    id
                    isLatestVersion
                    versionNumber
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page3, perPage: $perPage3, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page4, perPage: $perPage4) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page5, perPage: $perPage5) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "orderBy": order_by,
            "page": page,
            "perPage": per_page,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "page3": page_3,
            "perPage3": per_page_3,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page4": page_4,
            "perPage4": per_page_4,
            "page5": page_5,
            "perPage5": per_page_5,
            "code": code,
        }
        response = self.execute(
            query=_query, operation_name="templateByCode", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return TemplateByCode.model_validate(data)

    def webapp(
        self,
        id: Any,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Webapp:
        _query = gql(
            """
            query webapp($page: Int, $perPage: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $id: UUID!) {
              webapp(id: $id) {
                createdBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                description
                icon
                id
                isFavorite
                name
                permissions {
                  delete
                  update
                }
                url
                workspace {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page, perPage: $perPage, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "id": id,
        }
        response = self.execute(
            query=_query, operation_name="webapp", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Webapp.model_validate(data)

    def webapps(
        self,
        favorite: Union[Optional[bool], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        workspace_slug: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Webapps:
        query = gql(
            """
            query webapps($favorite: Boolean, $page: Int, $perPage: Int, $workspaceSlug: String) {
              webapps(
                favorite: $favorite
                page: $page
                perPage: $perPage
                workspaceSlug: $workspaceSlug
              ) {
                items {
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  description
                  icon
                  id
                  isFavorite
                  name
                  permissions {
                    delete
                    update
                  }
                  url
                  workspace {
                    createdAt
                    description
                    dockerImage
                    name
                    slug
                    updatedAt
                  }
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "favorite": favorite,
            "page": page,
            "perPage": per_page,
            "workspaceSlug": workspace_slug,
        }
        response = self.execute(
            query=query, operation_name="webapps", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Webapps.model_validate(data)

    def workspace(
        self,
        key: str,
        name: str,
        slug: str,
        ignore_hidden_files: Union[Optional[bool], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        prefix: Union[Optional[str], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query_1: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        per_page_4: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Workspace:
        _query = gql(
            """
            query workspace($key: String!, $ignoreHiddenFiles: Boolean, $page: Int, $perPage: Int, $prefix: String, $query: String, $name: String!, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $pinned: Boolean, $query1: String, $includeAccepted: Boolean, $page3: Int, $perPage3: Int, $page4: Int, $perPage4: Int, $slug: String!) {
              workspace(slug: $slug) {
                bucket {
                  name
                  object(key: $key) {
                    key
                    name
                    path
                    size
                    type
                    updatedAt
                  }
                  objects(
                    ignoreHiddenFiles: $ignoreHiddenFiles
                    page: $page
                    perPage: $perPage
                    prefix: $prefix
                    query: $query
                  ) {
                    hasNextPage
                    hasPreviousPage
                    pageNumber
                  }
                }
                connections {
                  __typename
                  createdAt
                  description
                  fields {
                    code
                    createdAt
                    secret
                    updatedAt
                    value
                  }
                  id
                  name
                  permissions {
                    delete
                    update
                  }
                  slug
                  type
                  updatedAt
                  user {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                }
                countries {
                  alpha3
                  code
                  flag
                  name
                  whoInfo {
                    defaultCRS
                    simplifiedExtent
                  }
                }
                createdAt
                createdBy {
                  avatar {
                    color
                    initials
                  }
                  dateJoined
                  displayName
                  email
                  firstName
                  id
                  language
                  lastLogin
                  lastName
                }
                database {
                  credentials {
                    dbName
                    host
                    password
                    port
                    url
                    username
                  }
                  table(name: $name) {
                    count
                    name
                    sample
                  }
                  tables(page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                }
                datasets(page: $page2, perPage: $perPage2, pinned: $pinned, query: $query1) {
                  items {
                    createdAt
                    id
                    isPinned
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                description
                dockerImage
                invitations(includeAccepted: $includeAccepted, page: $page3, perPage: $perPage3) {
                  items {
                    createdAt
                    email
                    id
                    role
                    status
                    updatedAt
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                members(page: $page4, perPage: $perPage4) {
                  items {
                    createdAt
                    id
                    role
                    updatedAt
                  }
                  pageNumber
                  totalItems
                  totalPages
                }
                name
                permissions {
                  createConnection
                  createDataset
                  createObject
                  createPipeline
                  createPipelineTemplateVersion
                  delete
                  deleteDatabaseTable
                  deleteObject
                  downloadObject
                  launchNotebookServer
                  manageMembers
                  update
                }
                slug
                updatedAt
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "key": key,
            "ignoreHiddenFiles": ignore_hidden_files,
            "page": page,
            "perPage": per_page,
            "prefix": prefix,
            "query": query,
            "name": name,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "pinned": pinned,
            "query1": query_1,
            "includeAccepted": include_accepted,
            "page3": page_3,
            "perPage3": per_page_3,
            "page4": page_4,
            "perPage4": per_page_4,
            "slug": slug,
        }
        response = self.execute(
            query=_query, operation_name="workspace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Workspace.model_validate(data)

    def workspaces(
        self,
        page: Union[Optional[int], UnsetType] = UNSET,
        per_page: Union[Optional[int], UnsetType] = UNSET,
        pinned: Union[Optional[bool], UnsetType] = UNSET,
        query: Union[Optional[str], UnsetType] = UNSET,
        include_accepted: Union[Optional[bool], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        per_page_1: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        per_page_2: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        per_page_3: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Workspaces:
        _query = gql(
            """
            query workspaces($page: Int, $perPage: Int, $pinned: Boolean, $query: String, $includeAccepted: Boolean, $page1: Int, $perPage1: Int, $page2: Int, $perPage2: Int, $page3: Int, $perPage3: Int, $query1: String) {
              workspaces(page: $page3, perPage: $perPage3, query: $query1) {
                items {
                  bucket {
                    name
                  }
                  connections {
                    __typename
                    createdAt
                    description
                    id
                    name
                    slug
                    type
                    updatedAt
                  }
                  countries {
                    alpha3
                    code
                    flag
                    name
                  }
                  createdAt
                  createdBy {
                    dateJoined
                    displayName
                    email
                    firstName
                    id
                    language
                    lastLogin
                    lastName
                  }
                  datasets(page: $page, perPage: $perPage, pinned: $pinned, query: $query) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  description
                  dockerImage
                  invitations(includeAccepted: $includeAccepted, page: $page1, perPage: $perPage1) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  members(page: $page2, perPage: $perPage2) {
                    pageNumber
                    totalItems
                    totalPages
                  }
                  name
                  permissions {
                    createConnection
                    createDataset
                    createObject
                    createPipeline
                    createPipelineTemplateVersion
                    delete
                    deleteDatabaseTable
                    deleteObject
                    downloadObject
                    launchNotebookServer
                    manageMembers
                    update
                  }
                  slug
                  updatedAt
                }
                pageNumber
                totalItems
                totalPages
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "page": page,
            "perPage": per_page,
            "pinned": pinned,
            "query": query,
            "includeAccepted": include_accepted,
            "page1": page_1,
            "perPage1": per_page_1,
            "page2": page_2,
            "perPage2": per_page_2,
            "page3": page_3,
            "perPage3": per_page_3,
            "query1": query_1,
        }
        response = self.execute(
            query=_query, operation_name="workspaces", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Workspaces.model_validate(data)

    def get_countries(self, workspace_slug: str, **kwargs: Any) -> GetCountries:
        query = gql(
            """
            query getCountries($workspaceSlug: String!) {
              workspace(slug: $workspaceSlug) {
                countries {
                  code
                  name
                  flag
                  alpha3
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"workspaceSlug": workspace_slug}
        response = self.execute(
            query=query, operation_name="getCountries", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetCountries.model_validate(data)
