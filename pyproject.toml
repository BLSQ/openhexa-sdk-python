[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "openhexa.sdk"
version = "0.1.37"
description = "OpenHEXA SDK"

authors = [{ name = "Bluesquare", email = "dev@bluesquarehub.com" }]
maintainers = [{ name = "Bluesquare", email = "dev@bluesquarehub.com" }]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
requires-python = ">=3.9,<3.12" # the main constraint for supported Python versions is the multiprocess library
dependencies = [
    "multiprocess~=0.70.15",
    "requests~=2.31.0",
    "PyYAML~=6.0",
    "stringcase~=1.2.0",
    "click~=8.1.3",
]

[project.scripts]
openhexa = "openhexa.cli:app"


[project.optional-dependencies]
dev = [
    "ruff~=0.1.11",
    "pytest>=7.3,<8.1",
    "build>=0.10,<1.1",
    "pytest-cov>=4.0,<4.2",
    "pre-commit",
    "httmock",
]
examples = [
    "geopandas>=0.12.2,<0.15.0",
    "pandas>=2.0,<2.3",
    "rasterio~=1.3.6",
    "rasterstats>=0.18,<0.20",
    "setuptools>=67.6.1,<69.1.0",
    "SQLAlchemy~=2.0.9",
    "psycopg2",
]


[tool.setuptools.packages.find]
where = ["."]
namespaces = true


[project.urls]
"Homepage" = "https://github.com/blsq/openhexa-sdk-python"
"Bug Tracker" = "https://github.com/blsq/openhexa-sdk-python/issues"


[tool.setuptools]
include-package-data = true

[tool.ruff]
line-length = 120
ignore = ["E501"]

[tool.ruff.lint]
extend-select = [
    "D",   # pydocstyle
    "I",   # isort
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
]
# Disable all "missing docstrings" and "missing type annotations" rules for now
# TODO: enable
ignore = [
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN205",
    "ANN401",
]

[tool.ruff.pycodestyle]
max-doc-length = 120


[tool.ruff.lint.pydocstyle]
convention = "numpy" # Accepts: "google", "numpy", or "pep257".


[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]
